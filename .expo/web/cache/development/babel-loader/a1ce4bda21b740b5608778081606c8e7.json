{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/LinkAccount/LinkAccountContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport validate from \"validate.js\";\nimport { LinkAccount } from \"./LinkAccount\";\nimport { config } from \"./config\";\nimport { CIS } from \"../../API\";\nimport { getFormattedDate } from \"../../library/helpers\";\nexport var LinkAccountContainer = function LinkAccountContainer(props) {\n  var _useState = useState({\n    accountNumber: \"\",\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    birthDate: new Date(),\n    tin: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formData = _useState2[0],\n      setFormData = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      invalids = _useState4[0],\n      setInvalids = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSubmitting = _useState6[0],\n      setSubmittingStatus = _useState6[1];\n\n  var navigation = props.navigation,\n      params = props.route.params;\n  useEffect(function () {\n    if (params == null ? void 0 : params.formData) {\n      setFormData(function (currentState) {\n        return _objectSpread(_objectSpread({}, currentState), params == null ? void 0 : params.formData);\n      });\n    }\n  }, [params == null ? void 0 : params.formData]);\n\n  var handleBlur = function handleBlur(index) {\n    var additionalValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!config.validate) {\n      return true;\n    }\n\n    var newInvalids = {};\n\n    if (__DEV__) {\n      if (!formData[index] === undefined) {\n        console.warn(\"'\" + index + \"' index is not found in [formData] state.\");\n      }\n\n      if (!config.constraints[index]) {\n        console.warn(\"There are no Validation Constraints for '\" + index + \"' form data index.\");\n      }\n    }\n\n    var toBeValidated = _objectSpread(_objectSpread({}, additionalValidation), {}, _defineProperty({}, index, formData[index]));\n\n    var invalid = handleValidate(toBeValidated, _defineProperty({}, index, config.constraints[index]));\n\n    if (!invalid) {\n      newInvalids = _objectSpread({}, invalids);\n      delete newInvalids[index];\n    } else {\n      newInvalids = _objectSpread(_objectSpread({}, invalids), invalid);\n    }\n\n    setInvalids(newInvalids);\n    return newInvalids;\n  };\n\n  var handleChange = function handleChange(index, value) {\n    setFormData(function (currentState) {\n      return _objectSpread(_objectSpread({}, currentState), {}, _defineProperty({}, index, value));\n    });\n  };\n\n  var handleSubmit = function handleSubmit() {\n    var invalid = handleValidate(formData, config.constraints);\n\n    if (invalid) {\n      setInvalids(invalid);\n    } else {\n      setSubmittingStatus(true);\n      CIS.check(_objectSpread(_objectSpread({}, formData), {}, {\n        birthDate: getFormattedDate(formData.birthDate)\n      })).then(function (_ref) {\n        var data = _ref.data.data;\n        var _data$RegisterInfo = data[\"Register.Info\"],\n            errorMessage = _data$RegisterInfo.ErrorMsg,\n            returnCode = _data$RegisterInfo.ReturnCode,\n            token = _data$RegisterInfo.token;\n\n        if (token) {\n          navigation.navigate(\"OTPLinkAccount\", {\n            token: token\n          });\n        } else {\n          Alert.alert(\"Link Account failed\", errorMessage);\n        }\n      }).catch(function (error) {\n        Alert.alert(\"Server Error\", \"Ooops! There's something wrong connecting to the server. Please try again.\");\n      }).finally(function () {\n        return setSubmittingStatus(false);\n      });\n    }\n  };\n\n  var handleValidate = function handleValidate() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!config.validate) {\n      return false;\n    }\n\n    var invalid = validate(data, constraints);\n    return invalid;\n  };\n\n  return React.createElement(LinkAccount, {\n    data: formData,\n    invalids: invalids,\n    isSubmitting: isSubmitting,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  });\n};\nLinkAccountContainer.propTypes = {};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return function () {\n    return {};\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LinkAccountContainer);","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/LinkAccount/LinkAccountContainer.js"],"names":["React","useEffect","useState","PropTypes","connect","validate","LinkAccount","config","CIS","getFormattedDate","LinkAccountContainer","props","accountNumber","firstName","middleName","lastName","birthDate","Date","tin","formData","setFormData","invalids","setInvalids","isSubmitting","setSubmittingStatus","navigation","params","route","currentState","handleBlur","index","additionalValidation","newInvalids","__DEV__","undefined","console","warn","constraints","toBeValidated","invalid","handleValidate","handleChange","value","handleSubmit","check","then","data","errorMessage","ErrorMsg","returnCode","ReturnCode","token","navigate","Alert","alert","catch","error","finally","propTypes","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Alert } from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport validate from \"validate.js\";\n\n// Form Component\nimport { LinkAccount } from \"./LinkAccount\";\n\n// Custom Component Here\n\n// Others\nimport { config } from \"./config\";\nimport { CIS } from \"../../API\";\nimport { getFormattedDate } from \"../../library/helpers\";\n\n\nexport const LinkAccountContainer = (props) => {\n  const [formData, setFormData] = useState({\n    accountNumber: \"\",\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    birthDate: new Date(),\n    tin: \"\",\n  });\n  const [invalids, setInvalids] = useState({});\n  const [isSubmitting, setSubmittingStatus] = useState(false);\n  const {\n    navigation,\n    route: { params },\n  } = props;\n\n  useEffect(() => {\n    if (params?.formData) {\n      setFormData((currentState) => ({\n        ...currentState,\n        ...params?.formData,\n      }));\n    }\n  }, [params?.formData]);\n\n  /**\n   * Handle Blur Event Listener\n   * @description Used for validating inputs when onBlur event is triggered\n   * @param {String} index formData index\n   * @param {Object} additionalValidation Additional data for validation (used for Equality Validation)\n   */\n  const handleBlur = (index, additionalValidation = {}) => {\n    if (!config.validate) {\n      return true;\n    }\n\n    let newInvalids = {};\n\n    if (__DEV__) {\n      // Warn the user if the given index doesn't exist in [formData] state\n      if (!formData[index] === undefined) {\n        console.warn(`'${index}' index is not found in [formData] state.`);\n      }\n\n      // Warn the user if there's no Validation Constraints to the specified index\n      if (!config.constraints[index]) {\n        console.warn(\n          `There are no Validation Constraints for '${index}' form data index.`\n        );\n      }\n    }\n\n    const toBeValidated = {\n      ...additionalValidation,\n      [index]: formData[index],\n    };\n\n    const invalid = handleValidate(toBeValidated, {\n      [index]: config.constraints[index],\n    });\n\n    if (!invalid) {\n      // Remove the specified index from [invalids] state\n      newInvalids = { ...invalids };\n      delete newInvalids[index];\n    } else {\n      // Add [invalid] to [invalids] state\n      newInvalids = {\n        ...invalids,\n        ...invalid,\n      };\n    }\n\n    // Set new Invalids as [invalids] state\n    setInvalids(newInvalids);\n\n    // Return New Invalids\n    return newInvalids;\n  };\n\n  const handleChange = (index, value) => {\n    setFormData((currentState) => ({\n      ...currentState,\n      [index]: value,\n    }));\n  };\n\n  const handleSubmit = () => {\n    // Validate\n    const invalid = handleValidate(formData, config.constraints);\n    if (invalid) {\n      setInvalids(invalid);\n    } else {\n      setSubmittingStatus(true);\n      // Submit\n      CIS.check({...formData, birthDate: getFormattedDate(formData.birthDate)})\n        .then(({ data: {data} }) => {\n          const {\n            ErrorMsg: errorMessage,\n            ReturnCode: returnCode,\n            token,\n          } = data[\"Register.Info\"];\n          if (token) {\n            navigation.navigate(\"OTPLinkAccount\", { token });\n          } else {\n            Alert.alert(\"Link Account failed\", errorMessage);\n          }\n        })\n        .catch((error) => {\n          Alert.alert(\n            \"Server Error\",\n            \"Ooops! There's something wrong connecting to the server. Please try again.\"\n          );\n        })\n        .finally(() => setSubmittingStatus(false));\n    }\n  };\n\n  const handleValidate = (data = {}, constraints = {}) => {\n    if (!config.validate) {\n      return false;\n    }\n\n    const invalid = validate(data, constraints);\n    // Do additional invalid data processing here\n    return invalid;\n  };\n\n  return (\n    <LinkAccount\n      data={formData}\n      invalids={invalids}\n      isSubmitting={isSubmitting}\n      onBlur={handleBlur}\n      onChange={handleChange}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nLinkAccountContainer.propTypes = {};\n\nconst mapStateToProps = (state) => () => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LinkAccountContainer);\n"]},"metadata":{},"sourceType":"module"}