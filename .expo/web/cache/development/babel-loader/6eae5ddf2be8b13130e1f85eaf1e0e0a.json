{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/OTP/OTPLinkAccount.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { connect } from \"react-redux\";\nimport { CIS, bankAccount } from \"../../API\";\nimport { ModifiedOTP } from \"./ModifiedOTP\";\nexport var OTPLinkAccount = function OTPLinkAccount(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoadingState = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingText = _useState4[0],\n      setLoadingText = _useState4[1];\n\n  var auth = props.auth,\n      navigation = props.navigation,\n      params = props.route.params;\n  useEffect(function () {\n    if (!(params == null ? void 0 : params.token)) {\n      Alert.alert(\"Failed\", \"You need to fill-up the Link Account form first.\", [{\n        text: \"Ok\",\n        onPress: function onPress() {\n          return navigation.navigate(\"LinkAccount\");\n        }\n      }]);\n    }\n  }, [params == null ? void 0 : params.token]);\n\n  var handleLinkAccount = function handleLinkAccount(CISNumber) {\n    setLoadingState(true);\n    setLoadingText(\"Linking Account...\");\n    bankAccount.link(CISNumber, auth.accessToken).then(function (_ref) {\n      var success = _ref.data.success;\n\n      if (success) {\n        Alert.alert(\"Link Account\", \"Linked Account Successfully.\", [{\n          text: \"Ok\",\n          onPress: function onPress() {\n            return navigation.navigate(\"Dashboard\");\n          }\n        }]);\n      }\n    }).catch(function (error) {\n      Alert.alert(\"Server Error\", \"Ooops! There's something wrong connecting to the server. Please try again.\");\n    }).finally(function () {\n      return setLoadingState(false);\n    });\n  };\n\n  var handleDone = function handleDone(code) {\n    setLoadingState(true);\n    setLoadingText(\"Verifying OTP Code...\");\n    CIS.verify(params.token, code).then(function (_ref2) {\n      var data = _ref2.data.data;\n      var _data$RegisterInfo = data[\"Register.Info\"],\n          ErrorMessage = _data$RegisterInfo.ErrorMsg,\n          CISNumber = _data$RegisterInfo.cis_no;\n\n      if (CISNumber) {\n        handleLinkAccount(CISNumber);\n      } else {\n        Alert.alert(\"Wrong OTP Code\", ErrorMessage);\n      }\n    }).catch(function (error) {\n      Alert.alert(\"Server Error\", \"Ooops! There's something wrong connecting to the server. Please try again.\");\n    }).finally(function () {\n      return setLoadingState(false);\n    });\n  };\n\n  return React.createElement(ModifiedOTP, {\n    onDone: handleDone,\n    isLoading: isLoading,\n    loadingText: loadingText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  });\n};\nOTPLinkAccount.propTypes = {\n  navigation: PropTypes.object\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OTPLinkAccount);","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/OTP/OTPLinkAccount.js"],"names":["React","useEffect","useState","PropTypes","connect","CIS","bankAccount","ModifiedOTP","OTPLinkAccount","props","isLoading","setLoadingState","loadingText","setLoadingText","auth","navigation","params","route","token","Alert","alert","text","onPress","navigate","handleLinkAccount","CISNumber","link","accessToken","then","success","data","catch","error","finally","handleDone","code","verify","ErrorMessage","ErrorMsg","cis_no","propTypes","object","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Alert } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { CIS, bankAccount } from \"../../API\";\nimport { ModifiedOTP } from \"./ModifiedOTP\";\n\nexport const OTPLinkAccount = (props) => {\n  const [isLoading, setLoadingState] = useState(false);\n  const [loadingText, setLoadingText] = useState(\"\");\n  const {\n    auth,\n    navigation,\n    route: { params },\n  } = props;\n\n  useEffect(() => {\n    if (!params?.token) {\n      Alert.alert(\n        \"Failed\",\n        \"You need to fill-up the Link Account form first.\",\n        [\n          {\n            text: \"Ok\",\n            onPress: () => navigation.navigate(\"LinkAccount\"),\n          },\n        ]\n      );\n    }\n  }, [params?.token]);\n\n  /**\n   * Link Account Event Handler\n   * @param {String} CISNumber CIS Number\n   */\n  const handleLinkAccount = (CISNumber) => {\n    setLoadingState(true);\n    setLoadingText(\"Linking Account...\");\n    bankAccount\n      .link(CISNumber, auth.accessToken)\n      .then(({ data: { success } }) => {\n        if (success) {\n          Alert.alert(\"Link Account\", \"Linked Account Successfully.\", [\n            {\n              text: \"Ok\",\n              onPress: () => navigation.navigate(\"Dashboard\"),\n            },\n          ]);\n        }\n      })\n      .catch((error) => {\n        Alert.alert(\n          \"Server Error\",\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      })\n      .finally(() => setLoadingState(false));\n  };\n\n  /**\n   * CIS Verify Event Handler\n   * @param {String} code OTP Code\n   */\n  const handleDone = (code) => {\n    setLoadingState(true);\n    setLoadingText(\"Verifying OTP Code...\");\n    CIS.verify(params.token, code)\n      .then(({ data: { data } }) => {\n        const { ErrorMsg: ErrorMessage, cis_no: CISNumber } = data[\n          \"Register.Info\"\n        ];\n        if (CISNumber) {\n          // Verified\n          // Put CIS as attributes\n          handleLinkAccount(CISNumber);\n        } else {\n          // Mismatch Token\n          Alert.alert(\"Wrong OTP Code\", ErrorMessage);\n        }\n      })\n      .catch((error) => {\n        Alert.alert(\n          \"Server Error\",\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      })\n      .finally(() => setLoadingState(false));\n  };\n\n  return (\n    <ModifiedOTP\n      onDone={handleDone}\n      isLoading={isLoading}\n      loadingText={loadingText}\n    />\n  );\n};\n\nOTPLinkAccount.propTypes = {\n  navigation: PropTypes.object,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth \n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OTPLinkAccount);\n"]},"metadata":{},"sourceType":"module"}