{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createIBMInstance, mainInstance } from \"./config\";\nexport var manage = function manage(action) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return mainInstance.post(\"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\", _objectSpread({\n    action: action\n  }, params));\n};\nexport var getList = function getList(type) {\n  var additionalParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return mainInstance.get(\"/byteperbyte/MISDropDown\", {\n    params: _objectSpread({\n      type: type\n    }, additionalParams)\n  });\n};\nexport var attribute = {\n  put: function put(_ref) {\n    var attributeName = _ref.attributeName,\n        attributeValue = _ref.attributeValue,\n        accessToken = _ref.accessToken;\n    return manage(\"put_attribute_name\", {\n      attribute_name: attributeName,\n      attribute_value: attributeValue,\n      access_token: accessToken\n    });\n  },\n  get: function get(attributeName, accessToken) {\n    return manage(\"get_attribute_name\", {\n      attribute_name: attributeName,\n      access_token: accessToken\n    });\n  }\n};\nexport var auth = {\n  signin: function signin(username, password) {\n    return manage(\"signin\", {\n      username: username,\n      password: password\n    });\n  },\n  resendEmail: function resendEmail(id) {\n    return manage(\"resendUserVerification\", {\n      userid: id\n    });\n  },\n  verifyEmail: function verifyEmail(id) {\n    return manage(\"isEmailVerified\", {\n      userid: id\n    });\n  },\n  forgotPassword: function forgotPassword(username) {\n    return manage(\"forgotpassword\", {\n      user: username\n    });\n  }\n};\nexport var CIS = {\n  check: function check(_ref2) {\n    var firstName = _ref2.firstName,\n        middleName = _ref2.middleName,\n        lastName = _ref2.lastName,\n        birthDate = _ref2.birthDate;\n    return mainInstance.get(\"byteperbyte/CISCheck\", {\n      params: {\n        first_name: firstName,\n        middle_name: middleName,\n        last_name: lastName,\n        date_of_birth: birthDate\n      }\n    });\n  },\n  verify: function verify(token, otp) {\n    return mainInstance.get(\"byteperbyte/CISVerify\", {\n      params: {\n        token: token,\n        otp: otp\n      }\n    });\n  }\n};\nexport var bankAccount = {\n  create: function create() {\n    var accountDetails = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return mainInstance.post(\"sunsavings/SSCreateAccountRequest\", accountDetails);\n  },\n  link: function link(CISNumber, accessToken) {\n    return attribute.put({\n      attributeName: \"cis_no\",\n      attributeValue: CISNumber,\n      accessToken: accessToken\n    });\n  },\n  get: function get(CISNo) {\n    return mainInstance.get(\"byteperbyte/CISAccountInquiry\", {\n      params: {\n        cisno: CISNo\n      }\n    });\n  },\n  getHistory: function getHistory(accountNumber, count) {\n    return mainInstance.get(\"byteperbyte/AccountInquiryHistory\", {\n      params: {\n        acctno: accountNumber,\n        count: count\n      }\n    });\n  },\n  getInfo: function getInfo(accountNumber) {\n    return mainInstance.get(\"byteperbyte/AccountsInfo\", {\n      params: {\n        acctno: accountNumber\n      }\n    });\n  }\n};\nexport var OTP = {\n  request: function request(to, data) {\n    if (!(to == null ? void 0 : to.mobileNumber) && !(to == null ? void 0 : to.email)) {\n      return false;\n    }\n\n    return mainInstance.post(\"tm/otp_sunsavings\", {\n      mobile_number: to.mobileNumber,\n      email: to.email,\n      save_info: data\n    });\n  },\n  verify: function verify(code, token) {\n    return mainInstance.post(\"tm/otp_verify\", {\n      token: \"\" + token + code\n    });\n  }\n};\nexport var profile = {\n  get: function get(id) {\n    return manage(\"getProfile\", {\n      user_id: id\n    });\n  },\n  addAttribute: function addAttribute(_ref3) {\n    var attributeName = _ref3.attributeName,\n        attributeValue = _ref3.attributeValue,\n        accessToken = _ref3.accessToken;\n    return manage(\"put_attribute_name\", {\n      attribute_name: attributeName,\n      attribute_value: attributeValue,\n      access_token: accessToken\n    });\n  },\n  updateAttribute: function updateAttribute(_ref4) {\n    var subId = _ref4.subId,\n        attributes = _ref4.attributes;\n    return manage(\"updateProfile\", {\n      id: subId,\n      attributes: attributes\n    });\n  },\n  getAttribute: function getAttribute(attributeName, accessToken) {\n    return manage(\"get_attribute_name\", {\n      attribute_name: attributeName,\n      access_token: accessToken\n    });\n  }\n};\nexport var user = {\n  create: function create(_ref5) {\n    var email = _ref5.email,\n        password = _ref5.password,\n        givenName = _ref5.givenName,\n        middleName = _ref5.middleName,\n        familyName = _ref5.familyName,\n        phoneNumber = _ref5.phoneNumber;\n    return manage(\"signup\", {\n      email: email,\n      password: password,\n      givenName: givenName,\n      middleName: middleName,\n      familyName: familyName,\n      phoneNumber: phoneNumber\n    });\n  },\n  update: function update() {\n    var userData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var filteredUserData = Object.entries(userData).reduce(function (a, _ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n          k = _ref7[0],\n          v = _ref7[1];\n\n      return v ? (a[k] = v, a) : a;\n    }, {});\n\n    if (!filteredUserData.id || !filteredUserData.name || !filteredUserData.emails) {\n      return false;\n    }\n\n    return manage(\"updateUserByID\", {\n      user_data: filteredUserData\n    });\n  },\n  getInfo: function getInfo(accessToken) {\n    return createIBMInstance(accessToken).get(\"/userinfo\");\n  }\n};\nexport var token = {\n  getByRefreshToken: function getByRefreshToken(refreshToken) {\n    return manage(\"refresh_token\", {\n      refresh_token: refreshToken\n    });\n  }\n};\nexport var list = {\n  getBank: function getBank() {\n    return mainInstance.get(\"/byteperbyte/BankList\");\n  },\n  getCity: function getCity(city) {\n    return mainInstance.get(\"/byteperbyte/MISSearch\", {\n      params: {\n        search: city\n      }\n    });\n  },\n  getBarangay: function getBarangay(cityCode) {\n    return getList(\"address\", {\n      city_code: cityCode\n    });\n  },\n  getCivilStatus: function getCivilStatus() {\n    return getList(\"civil_status\");\n  },\n  getHomeOwnership: function getHomeOwnership() {\n    return getList(\"home_ownership\");\n  },\n  getIdList: function getIdList() {\n    return getList(\"id_list\");\n  },\n  getJobTitle: function getJobTitle() {\n    return getList(\"job_title\");\n  },\n  getNationality: function getNationality() {\n    return getList(\"nationality\");\n  },\n  getSourceOfFund: function getSourceOfFund() {\n    return getList(\"source_of_fund\");\n  }\n};\nexport var transferMoney = {\n  otp: function otp(accountNumber) {\n    return mainInstance.post(\"/byteperbyte/InstaPayOTP\", {\n      acctno: accountNumber\n    });\n  },\n  transfer: function transfer() {\n    var transerDetails = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      amount: null,\n      bankCode: null,\n      recipientAccountNumber: null,\n      recipientMobileNumber: null,\n      recipientAccountName: null,\n      senderAccountNumber: null\n    };\n    var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      otp: null,\n      token: null\n    };\n    return mainInstance.post(\"/byteperbyte/InstaPayTM\", {\n      amount: transerDetails.amount,\n      bank_code: transerDetails.bankCode,\n      otp: code.otp,\n      recipient_accno: transerDetails.recipientAccountNumber,\n      recipient_mobile_no: transerDetails.recipientMobileNumber,\n      recipient_name: transerDetails.recipientAccountName,\n      sender_acctno: transerDetails.senderAccountNumber,\n      token: code.token\n    });\n  }\n};","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/API/index.js"],"names":["createIBMInstance","mainInstance","manage","action","params","post","getList","type","additionalParams","get","attribute","put","attributeName","attributeValue","accessToken","attribute_name","attribute_value","access_token","auth","signin","username","password","resendEmail","id","userid","verifyEmail","forgotPassword","user","CIS","check","firstName","middleName","lastName","birthDate","first_name","middle_name","last_name","date_of_birth","verify","token","otp","bankAccount","create","accountDetails","link","CISNumber","CISNo","cisno","getHistory","accountNumber","count","acctno","getInfo","OTP","request","to","data","mobileNumber","email","mobile_number","save_info","code","profile","user_id","addAttribute","updateAttribute","subId","attributes","getAttribute","givenName","familyName","phoneNumber","update","userData","filteredUserData","Object","entries","reduce","a","k","v","name","emails","user_data","getByRefreshToken","refreshToken","refresh_token","list","getBank","getCity","city","search","getBarangay","cityCode","city_code","getCivilStatus","getHomeOwnership","getIdList","getJobTitle","getNationality","getSourceOfFund","transferMoney","transfer","transerDetails","amount","bankCode","recipientAccountNumber","recipientMobileNumber","recipientAccountName","senderAccountNumber","bank_code","recipient_accno","recipient_mobile_no","recipient_name","sender_acctno"],"mappings":"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","sourcesContent":["import { createIBMInstance, mainInstance } from \"./config\";\n\nexport const manage = (action, params = {}) => {\n  return mainInstance.post(\"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\", {\n    action,\n    ...params,\n  });\n};\n\nexport const getList = (type, additionalParams = {}) => {\n  return mainInstance.get(\"/byteperbyte/MISDropDown\", {\n    params: {\n      type,\n      ...additionalParams,\n    },\n  });\n};\n\nexport const attribute = {\n  put: ({ attributeName, attributeValue, accessToken }) => {\n    return manage(\"put_attribute_name\", {\n      attribute_name: attributeName,\n      attribute_value: attributeValue,\n      access_token: accessToken,\n    });\n  },\n  get: (attributeName, accessToken) => {\n    return manage(\"get_attribute_name\", {\n      attribute_name: attributeName,\n      access_token: accessToken,\n    });\n  },\n};\n\nexport const auth = {\n  signin: (username, password) => {\n    return manage(\"signin\", { username, password });\n  },\n\n  resendEmail: (id) => {\n    return manage(\"resendUserVerification\", {\n      userid: id,\n    });\n  },\n\n  verifyEmail: (id) => {\n    return manage(\"isEmailVerified\", { userid: id });\n  },\n\n  forgotPassword: (username) => {\n    return manage(\"forgotpassword\", {\n      user: username,\n    });\n  },\n};\n\nexport const CIS = {\n  check: ({ firstName, middleName, lastName, birthDate }) => {\n    return mainInstance.get(\"byteperbyte/CISCheck\", {\n      params: {\n        first_name: firstName,\n        middle_name: middleName,\n        last_name: lastName,\n        date_of_birth: birthDate,\n      },\n    });\n  },\n\n  verify: (token, otp) => {\n    return mainInstance.get(\"byteperbyte/CISVerify\", {\n      params: {\n        token,\n        otp,\n      },\n    });\n  },\n};\n\nexport const bankAccount = {\n  /**\n   * Create Account\n   * @description Used for creating Bank Accounts with provided account details\n   * @param {Object} accountDetails Account Bank Details\n   */\n  create: (accountDetails = {}) => {\n    return mainInstance.post(\n      \"sunsavings/SSCreateAccountRequest\",\n      accountDetails\n    );\n  },\n\n  /**\n   * Link Account\n   * @description\n   * @param {String} CISNumber CIS Number\n   * @param {String} accessToken Access Token\n   */\n  link: (CISNumber, accessToken) => {\n    return attribute.put({\n      attributeName: \"cis_no\",\n      attributeValue: CISNumber,\n      accessToken,\n    });\n  },\n\n  /**\n   * Get Accounts\n   * @description Used for fetching Bank Accounts based on CIS Number provided\n   * @param {String} CISNo Customer Information System Number\n   */\n  get: (CISNo) => {\n    return mainInstance.get(\"byteperbyte/CISAccountInquiry\", {\n      params: {\n        cisno: CISNo,\n      },\n    });\n  },\n\n  /**\n   * Get History\n   * @description Used for fetching transaction history of bank account based on account number provided.\n   * @param {String} accountNumber Bank Account Number\n   * @param {Number} count Count\n   */\n  getHistory: (accountNumber, count) => {\n    return mainInstance.get(\"byteperbyte/AccountInquiryHistory\", {\n      params: {\n        acctno: accountNumber,\n        count,\n      },\n    });\n  },\n\n  getInfo: (accountNumber) => {\n    return mainInstance.get(\"byteperbyte/AccountsInfo\", {\n      params: {\n        acctno: accountNumber,\n      },\n    });\n  },\n};\n\nexport const OTP = {\n  request: (\n    to,\n    data\n  ) => {\n    if (!to?.mobileNumber && !to?.email) {\n      return false;\n    }\n\n    return mainInstance.post(\"tm/otp_sunsavings\", {\n      mobile_number: to.mobileNumber,\n      email: to.email,\n      save_info: data\n    });\n  },\n  verify: (code, token) => {\n    return mainInstance.post(\"tm/otp_verify\", {\n      token: `${token}${code}`\n    });\n  }\n};\n\nexport const profile = {\n  get: (id) => {\n    return manage(\"getProfile\", { user_id: id });\n  },\n\n  addAttribute: ({ attributeName, attributeValue, accessToken }) => {\n    return manage(\"put_attribute_name\", {\n      attribute_name: attributeName,\n      attribute_value: attributeValue,\n      access_token: accessToken,\n    });\n  },\n\n  updateAttribute: ({ subId, attributes }) => {\n    return manage(\"updateProfile\", {\n      id: subId,\n      attributes,\n    });\n  },\n\n  getAttribute: (attributeName, accessToken) => {\n    return manage(\"get_attribute_name\", {\n      attribute_name: attributeName,\n      access_token: accessToken,\n    });\n  },\n};\n\nexport const user = {\n  create: ({\n    email,\n    password,\n    givenName,\n    middleName,\n    familyName,\n    phoneNumber,\n  }) => {\n    return manage(\"signup\", {\n      email,\n      password,\n      givenName,\n      middleName,\n      familyName,\n      phoneNumber,\n    });\n  },\n\n  update: (userData = {}) => {\n    const filteredUserData = Object.entries(userData).reduce(\n      (a, [k, v]) => (v ? ((a[k] = v), a) : a),\n      {}\n    );\n\n    if (\n      !filteredUserData.id ||\n      !filteredUserData.name ||\n      !filteredUserData.emails\n    ) {\n      return false;\n    }\n\n    return manage(\"updateUserByID\", {\n      user_data: filteredUserData\n    });\n  },\n\n  getInfo: (accessToken) => {\n    return createIBMInstance(accessToken).get(\"/userinfo\");\n  },\n};\n\nexport const token = {\n  getByRefreshToken: (refreshToken) => {\n    return manage(\"refresh_token\", { refresh_token: refreshToken });\n  },\n};\n\nexport const list = {\n  getBank: () => {\n    return mainInstance.get(\"/byteperbyte/BankList\");\n  },\n  getCity: (city) => {\n    return mainInstance.get(\"/byteperbyte/MISSearch\", {\n      params: {\n        search: city,\n      },\n    });\n  },\n  getBarangay: (cityCode) => {\n    return getList(\"address\", { city_code: cityCode });\n  },\n  getCivilStatus: () => {\n    return getList(\"civil_status\");\n  },\n  getHomeOwnership: () => {\n    return getList(\"home_ownership\");\n  },\n  getIdList: () => {\n    return getList(\"id_list\");\n  },\n  getJobTitle: () => {\n    return getList(\"job_title\");\n  },\n  getNationality: () => {\n    return getList(\"nationality\");\n  },\n  getSourceOfFund: () => {\n    return getList(\"source_of_fund\");\n  },\n};\n\nexport const transferMoney = {\n  otp: (accountNumber) => {\n    return mainInstance.post(\"/byteperbyte/InstaPayOTP\", {\n      acctno: accountNumber,\n    });\n  },\n  transfer: (\n    transerDetails = {\n      amount: null,\n      bankCode: null,\n      recipientAccountNumber: null,\n      recipientMobileNumber: null,\n      recipientAccountName: null,\n      senderAccountNumber: null,\n    },\n    code = {\n      otp: null,\n      token: null,\n    }\n  ) => {\n    return mainInstance.post(\"/byteperbyte/InstaPayTM\", {\n      amount: transerDetails.amount,\n      bank_code: transerDetails.bankCode,\n      otp: code.otp,\n      recipient_accno: transerDetails.recipientAccountNumber,\n      recipient_mobile_no: transerDetails.recipientMobileNumber,\n      recipient_name: transerDetails.recipientAccountName,\n      sender_acctno: transerDetails.senderAccountNumber,\n      token: code.token,\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}