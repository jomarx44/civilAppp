{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/App.js\";\nimport \"react-native-gesture-handler\";\nimport 'intl';\nimport 'intl/locale-data/jsonp/en';\nimport React, { useEffect, useState } from \"react\";\nimport { AppLoading } from \"expo\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Provider } from \"react-redux\";\nimport { Root } from \"native-base\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { configureStore } from \"./src/redux/store\";\nimport { fonts } from \"./src/res/fonts\";\nimport * as Font from \"expo-font\";\nimport OnBoardingScreen from \"./src/screens/OnBoardingScreen\";\nimport Navigator from \"./src/navigation\";\nimport * as Sentry from 'sentry-expo';\nSentry.init({\n  dsn: 'https://c22c0a956ad54b16921b931a82ad7012@o427147.ingest.sentry.io/5370817',\n  enableAutoSessionTracking: true,\n  enableInExpoDevelopment: true,\n  debug: true\n});\nexport var App = function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setReady = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFirstTime = _useState4[0],\n      setFirstTime = _useState4[1];\n\n  useEffect(function () {\n    var getFontAsync = function getFontAsync() {\n      var status;\n      return _regeneratorRuntime.async(function getFontAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(fonts));\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"isFirstTime\"));\n\n            case 4:\n              _context.t0 = _context.sent;\n              status = _context.t0 !== \"false\";\n              setFirstTime(status);\n              setReady(true);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getFontAsync();\n  }, []);\n\n  var handleProceed = function handleProceed() {\n    AsyncStorage.setItem(\"isFirstTime\", \"false\");\n    setFirstTime(false);\n  };\n\n  if (!isReady) {\n    return React.createElement(AppLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(Root, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(Provider, {\n    store: configureStore(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(SafeAreaProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, isFirstTime === true ? React.createElement(OnBoardingScreen, {\n    onProceed: handleProceed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }) : React.createElement(Navigator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/App.js"],"names":["React","useEffect","useState","AppLoading","Provider","Root","SafeAreaProvider","configureStore","fonts","Font","OnBoardingScreen","Navigator","Sentry","init","dsn","enableAutoSessionTracking","enableInExpoDevelopment","debug","App","isReady","setReady","isFirstTime","setFirstTime","getFontAsync","loadAsync","AsyncStorage","getItem","status","handleProceed","setItem"],"mappings":";;;AAAA,OAAO,8BAAP;AACA,OAAO,MAAP;AACA,OAAO,2BAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,MAA3B;;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,cAAT;AACA,SAASC,KAAT;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,gBAAP;AACA,OAAOC,SAAP;AACA,OAAO,KAAKC,MAAZ,MAAwB,aAAxB;AAEAA,MAAM,CAACC,IAAP,CAAY;AACVC,EAAAA,GAAG,EAAE,2EADK;AAEVC,EAAAA,yBAAyB,EAAE,IAFjB;AAGVC,EAAAA,uBAAuB,EAAE,IAHf;AAIVC,EAAAA,KAAK,EAAE;AAJG,CAAZ;AAOA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBACKhB,QAAQ,CAAC,KAAD,CADb;AAAA;AAAA,MAChBiB,OADgB;AAAA,MACPC,QADO;;AAAA,mBAEalB,QAAQ,CAAC,IAAD,CAFrB;AAAA;AAAA,MAEhBmB,WAFgB;AAAA,MAEHC,YAFG;;AAIvBrB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMsB,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACbd,IAAI,CAACe,SAAL,CAAehB,KAAf,CADa;;AAAA;AAAA;AAAA,+CAEGiB,YAAY,CAACC,OAAb,CAAqB,aAArB,CAFH;;AAAA;AAAA;AAEbC,cAAAA,MAFa,mBAE4C,OAF5C;AAGnBL,cAAAA,YAAY,CAACK,MAAD,CAAZ;AACAP,cAAAA,QAAQ,CAAC,IAAD,CAAR;;AAJmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAOAG,IAAAA,YAAY;AACb,GATQ,EASN,EATM,CAAT;;AAWA,MAAMK,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BH,IAAAA,YAAY,CAACI,OAAb,CAAqB,aAArB,EAAoC,OAApC;AACAP,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKA,MAAI,CAACH,OAAL,EAAc;AACZ,WAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEZ,cAAc,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGc,WAAW,KAAK,IAAhB,GACC,oBAAC,gBAAD;AAAkB,IAAA,SAAS,EAAEO,aAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADF,CADF,CADF;AAeD,CAvCM;AAyCP,eAAeV,GAAf","sourcesContent":["import \"react-native-gesture-handler\";\nimport 'intl';\nimport 'intl/locale-data/jsonp/en';\n\nimport React, { useEffect, useState } from \"react\";\nimport { AppLoading } from \"expo\";\nimport { AsyncStorage } from \"react-native\";\nimport { Provider } from \"react-redux\";\nimport { Root } from \"native-base\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { configureStore } from \"./src/redux/store\";\nimport { fonts } from \"./src/res/fonts\";\nimport * as Font from \"expo-font\";\nimport OnBoardingScreen from \"./src/screens/OnBoardingScreen\";\nimport Navigator from \"./src/navigation\";\nimport * as Sentry from 'sentry-expo';\n\nSentry.init({\n  dsn: 'https://c22c0a956ad54b16921b931a82ad7012@o427147.ingest.sentry.io/5370817',\n  enableAutoSessionTracking: true,\n  enableInExpoDevelopment: true,\n  debug: true,\n});\n\nexport const App = () => {\n  const [isReady, setReady] = useState(false);\n  const [isFirstTime, setFirstTime] = useState(true);\n\n  useEffect(() => {\n    const getFontAsync = async () => {\n      await Font.loadAsync(fonts);\n      const status = (await AsyncStorage.getItem(\"isFirstTime\")) !== \"false\";\n      setFirstTime(status);\n      setReady(true);\n    }\n\n    getFontAsync();\n  }, []);\n\n  const handleProceed = () => {\n    AsyncStorage.setItem(\"isFirstTime\", \"false\");\n    setFirstTime(false);\n  };\n\n  if (!isReady) {\n    return <AppLoading />;\n  }\n\n  return (\n    <Root>\n      <Provider store={configureStore()}>\n        <SafeAreaProvider>\n          {/* <StyleProvider style={getTheme(platform)}> */}\n          {isFirstTime === true ? (\n            <OnBoardingScreen onProceed={handleProceed} />\n          ) : (\n            <Navigator />\n          )}\n          {/* </StyleProvider> */}\n        </SafeAreaProvider>\n      </Provider>\n    </Root>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}