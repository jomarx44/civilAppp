{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/OTP/OTPTransferMoney.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { ModifiedOTP } from \"./ModifiedOTP\";\nimport { transferMoney } from \"../../API\";\nexport var OTPTransferMoney = function OTPTransferMoney(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoadingState = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      token = _useState4[0],\n      setToken = _useState4[1];\n\n  var navigation = props.navigation,\n      formData = props.route.params.formData;\n  useEffect(function () {\n    if (!formData) {\n      Alert.alert(\"OTP Failed\", \"You must review the transfer form first.\", [{\n        text: \"Go Back\",\n        onPress: navigation.goBack\n      }]);\n    } else {\n      if (!token) {\n        handleRequestOTP();\n      }\n    }\n  }, []);\n\n  var handleRequestOTP = function handleRequestOTP() {\n    return transferMoney.otp(formData.sourceAccount.accountNumberFormatted).then(function (_ref) {\n      var data = _ref.data.data;\n      var _data$AccountInfo = data[\"Account.Info\"],\n          token = _data$AccountInfo.token,\n          errorMessage = _data$AccountInfo.ErrorMsg;\n\n      if (token) {\n        return setToken(token);\n      }\n\n      Alert.alert(\"Invalid Account Number\", errorMessage, [{\n        text: \"Retry\",\n        onPress: function onPress() {\n          return handleRequestOTP();\n        }\n      }, {\n        text: \"Cancel\",\n        onPress: navigation.navigate(\"ReviewTransfer\", {\n          formData: formData\n        }),\n        style: \"cancel\"\n      }]);\n    }).catch(function () {\n      Alert.alert(\"Server Error\", \"Ooops! There's something wrong connecting to the server. Please try again.\", [{\n        text: \"Retry\",\n        onPress: function onPress() {\n          return handleRequestOTP();\n        }\n      }]);\n    });\n  };\n\n  var handleDone = function handleDone(code) {\n    setLoadingState(true);\n    return transferMoney.transfer({\n      amount: formData.amount,\n      bankCode: formData.bankCode,\n      recipientAccountNumber: formData.recipientAccountNumber,\n      recipientMobileNumber: formData.recipientMobileNumber,\n      recipientAccountName: formData.recipientAccountName,\n      senderAccountNumber: formData.sourceAccount.accountNumber\n    }, {\n      otp: code,\n      token: token\n    }).then(function (_ref2) {\n      var _ref2$data = _ref2.data,\n          data = _ref2$data.data,\n          status = _ref2$data.status;\n      var _data$AccountInfo2 = data[\"Account.Info\"],\n          errorMessage = _data$AccountInfo2.ErrorMsg,\n          inv = _data$AccountInfo2.inv;\n\n      if (inv) {\n        navigation.navigate(\"SuccessTransferMoney\", {\n          formData: formData\n        });\n      } else {\n        Alert.alert(\"Transefer Money Failed\", errorMessage);\n      }\n    }).catch(function () {\n      Alert.alert(\"Server Error\", \"Ooops! There's something wrong connecting to the server. Please try again.\", [{\n        text: \"Retry\",\n        onPress: function onPress() {\n          return handleDone(code);\n        }\n      }, {\n        text: \"Cancel\",\n        style: \"cancel\"\n      }]);\n    }).finally(function () {\n      return setLoadingState(false);\n    });\n  };\n\n  return React.createElement(ModifiedOTP, {\n    onDone: handleDone,\n    isLoading: isLoading,\n    loadingText: \"Verifying OTP Code...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  });\n};\nOTPTransferMoney.propTypes = {\n  navigation: PropTypes.object,\n  route: PropTypes.object\n};\n\nvar mapStateToProps = function mapStateToProps(props) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    requestOTP: function requestOTP(accountNumber) {\n      dispatch();\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OTPTransferMoney);","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/OTP/OTPTransferMoney.js"],"names":["React","useEffect","useState","PropTypes","connect","ModifiedOTP","transferMoney","OTPTransferMoney","props","isLoading","setLoadingState","token","setToken","navigation","formData","route","params","Alert","alert","text","onPress","goBack","handleRequestOTP","otp","sourceAccount","accountNumberFormatted","then","data","errorMessage","ErrorMsg","navigate","style","catch","handleDone","code","transfer","amount","bankCode","recipientAccountNumber","recipientMobileNumber","recipientAccountName","senderAccountNumber","accountNumber","status","inv","finally","propTypes","object","mapStateToProps","mapDispatchToProps","dispatch","requestOTP"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAIA,SAASC,WAAT;AAGA,SAASC,aAAT;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAAA,kBACJN,QAAQ,CAAC,KAAD,CADJ;AAAA;AAAA,MAClCO,SADkC;AAAA,MACvBC,eADuB;;AAAA,mBAEfR,QAAQ,CAAC,IAAD,CAFO;AAAA;AAAA,MAElCS,KAFkC;AAAA,MAE3BC,QAF2B;;AAAA,MAIvCC,UAJuC,GAQrCL,KARqC,CAIvCK,UAJuC;AAAA,MAM3BC,QAN2B,GAQrCN,KARqC,CAKvCO,KALuC,CAMrCC,MANqC,CAM3BF,QAN2B;AAUzCb,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAI,CAACa,QAAL,EAAe;AACbG,MAAAA,KAAK,CAACC,KAAN,CAAY,YAAZ,EAA0B,0CAA1B,EAAsE,CACpE;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAEP,UAAU,CAACQ;AAAvC,OADoE,CAAtE;AAGD,KAJD,MAIO;AACL,UAAG,CAACV,KAAJ,EAAW;AACTW,QAAAA,gBAAgB;AACjB;AACF;AACF,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,WAAOhB,aAAa,CACjBiB,GADI,CACAT,QAAQ,CAACU,aAAT,CAAuBC,sBADvB,EAEJC,IAFI,CAEC,gBAAwB;AAAA,UAAbC,IAAa,QAArBA,IAAqB,CAAbA,IAAa;AAAA,8BACcA,IAAI,CAAC,cAAD,CADlB;AAAA,UACpBhB,KADoB,qBACpBA,KADoB;AAAA,UACHiB,YADG,qBACbC,QADa;;AAE5B,UAAIlB,KAAJ,EAAW;AACT,eAAOC,QAAQ,CAACD,KAAD,CAAf;AACD;;AAEDM,MAAAA,KAAK,CAACC,KAAN,CAAY,wBAAZ,EAAsCU,YAAtC,EAAoD,CAClD;AACET,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,OAAO,EAAE;AAAA,iBAAME,gBAAgB,EAAtB;AAAA;AAFX,OADkD,EAKlD;AACEH,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,OAAO,EAAEP,UAAU,CAACiB,QAAX,CAAoB,gBAApB,EAAsC;AAC7ChB,UAAAA,QAAQ,EAARA;AAD6C,SAAtC,CAFX;AAKEiB,QAAAA,KAAK,EAAE;AALT,OALkD,CAApD;AAaD,KArBI,EAsBJC,KAtBI,CAsBE,YAAM;AACXf,MAAAA,KAAK,CAACC,KAAN,CACE,cADF,EAEE,4EAFF,EAGE,CACE;AACEC,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,OAAO,EAAE;AAAA,iBAAME,gBAAgB,EAAtB;AAAA;AAFX,OADF,CAHF;AAUD,KAjCI,CAAP;AAkCD,GAnCD;;AAqCA,MAAMW,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AAC3BxB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,WAAOJ,aAAa,CACjB6B,QADI,CACK;AACRC,MAAAA,MAAM,EAAEtB,QAAQ,CAACsB,MADT;AAERC,MAAAA,QAAQ,EAAEvB,QAAQ,CAACuB,QAFX;AAGRC,MAAAA,sBAAsB,EAAExB,QAAQ,CAACwB,sBAHzB;AAIRC,MAAAA,qBAAqB,EAAEzB,QAAQ,CAACyB,qBAJxB;AAKRC,MAAAA,oBAAoB,EAAE1B,QAAQ,CAAC0B,oBALvB;AAMRC,MAAAA,mBAAmB,EAAE3B,QAAQ,CAACU,aAAT,CAAuBkB;AANpC,KADL,EAQF;AAAEnB,MAAAA,GAAG,EAAEW,IAAP;AAAavB,MAAAA,KAAK,EAALA;AAAb,KARE,EASJe,IATI,CASC,iBAAgC;AAAA,6BAA7BC,IAA6B;AAAA,UAArBA,IAAqB,cAArBA,IAAqB;AAAA,UAAfgB,MAAe,cAAfA,MAAe;AAAA,+BAIhChB,IAAI,CAAC,cAAD,CAJ4B;AAAA,UAExBC,YAFwB,sBAElCC,QAFkC;AAAA,UAGlCe,GAHkC,sBAGlCA,GAHkC;;AAKpC,UAAIA,GAAJ,EAAU;AACR/B,QAAAA,UAAU,CAACiB,QAAX,CAAoB,sBAApB,EAA4C;AAAEhB,UAAAA,QAAQ,EAARA;AAAF,SAA5C;AACD,OAFD,MAEO;AACLG,QAAAA,KAAK,CAACC,KAAN,CAAY,wBAAZ,EAAsCU,YAAtC;AACD;AACF,KAnBI,EAoBJI,KApBI,CAoBE,YAAM;AACXf,MAAAA,KAAK,CAACC,KAAN,CACE,cADF,EAEE,4EAFF,EAGE,CACE;AACEC,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,OAAO,EAAE;AAAA,iBAAMa,UAAU,CAACC,IAAD,CAAhB;AAAA;AAFX,OADF,EAKE;AACEf,QAAAA,IAAI,EAAE,QADR;AAEEY,QAAAA,KAAK,EAAE;AAFT,OALF,CAHF;AAcD,KAnCI,EAoCJc,OApCI,CAoCI;AAAA,aAAMnC,eAAe,CAAC,KAAD,CAArB;AAAA,KApCJ,CAAP;AAqCD,GAvCD;;AAyCA,SACE,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAEuB,UAArB;AAAiC,IAAA,SAAS,EAAExB,SAA5C;AAAuD,IAAA,WAAW,EAAC,uBAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CAxGM;AA0GPF,gBAAgB,CAACuC,SAAjB,GAA6B;AAC3BjC,EAAAA,UAAU,EAAEV,SAAS,CAAC4C,MADK;AAE3BhC,EAAAA,KAAK,EAAEZ,SAAS,CAAC4C;AAFU,CAA7B;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACxC,KAAD;AAAA,SAAY,EAAZ;AAAA,CAAxB;;AAEA,IAAMyC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACLC,IAAAA,UAAU,EAAE,oBAACT,aAAD,EAAmB;AAC7BQ,MAAAA,QAAQ;AACT;AAHI,GAAP;AAKD,CAND;;AAQA,eAAe9C,OAAO,CAAC4C,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C1C,gBAA7C,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Alert } from \"react-native\";\n\n// Custom Component Here\nimport { ModifiedOTP } from \"./ModifiedOTP\";\n\n// Others\nimport { transferMoney } from \"../../API\";\n\nexport const OTPTransferMoney = (props) => {\n  const [isLoading, setLoadingState] = useState(false);\n  const [token, setToken] = useState(null);\n  const {\n    navigation,\n    route: {\n      params: { formData },\n    },\n  } = props;\n\n  useEffect(() => {\n    // No Form Data passed\n    if (!formData) {\n      Alert.alert(\"OTP Failed\", \"You must review the transfer form first.\", [\n        { text: \"Go Back\", onPress: navigation.goBack },\n      ]);\n    } else {\n      if(!token) {\n        handleRequestOTP();\n      }\n    }\n  }, []);\n\n  const handleRequestOTP = () => {\n    return transferMoney\n      .otp(formData.sourceAccount.accountNumberFormatted)\n      .then(({ data: { data } }) => {\n        const { token, ErrorMsg: errorMessage } = data[\"Account.Info\"];\n        if (token) {\n          return setToken(token);\n        }\n\n        Alert.alert(\"Invalid Account Number\", errorMessage, [\n          {\n            text: \"Retry\",\n            onPress: () => handleRequestOTP(),\n          },\n          {\n            text: \"Cancel\",\n            onPress: navigation.navigate(\"ReviewTransfer\", {\n              formData,\n            }),\n            style: \"cancel\",\n          },\n        ]);\n      })\n      .catch(() => {\n        Alert.alert(\n          \"Server Error\",\n          \"Ooops! There's something wrong connecting to the server. Please try again.\",\n          [\n            {\n              text: \"Retry\",\n              onPress: () => handleRequestOTP(),\n            },\n          ]\n        );\n      });\n  };\n\n  const handleDone = (code) => {\n    setLoadingState(true);\n    return transferMoney\n      .transfer({\n        amount: formData.amount,\n        bankCode: formData.bankCode,\n        recipientAccountNumber: formData.recipientAccountNumber,\n        recipientMobileNumber: formData.recipientMobileNumber,\n        recipientAccountName: formData.recipientAccountName,\n        senderAccountNumber: formData.sourceAccount.accountNumber,\n      }, { otp: code, token })\n      .then(({ data: { data, status } }) => {\n        const {\n          ErrorMsg: errorMessage,\n          inv\n        } = data[\"Account.Info\"];\n        if( inv ) {\n          navigation.navigate(\"SuccessTransferMoney\", { formData })\n        } else {\n          Alert.alert(\"Transefer Money Failed\", errorMessage);\n        }\n      })\n      .catch(() => {\n        Alert.alert(\n          \"Server Error\",\n          \"Ooops! There's something wrong connecting to the server. Please try again.\",\n          [\n            {\n              text: \"Retry\",\n              onPress: () => handleDone(code),\n            },\n            {\n              text: \"Cancel\",\n              style: \"cancel\"\n            },\n          ]\n        );\n      })\n      .finally(() => setLoadingState(false));\n  };\n\n  return (\n    <ModifiedOTP onDone={handleDone} isLoading={isLoading} loadingText=\"Verifying OTP Code...\" />\n  );\n};\n\nOTPTransferMoney.propTypes = {\n  navigation: PropTypes.object,\n  route: PropTypes.object,\n};\n\nconst mapStateToProps = (props) => ({});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    requestOTP: (accountNumber) => {\n      dispatch();\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OTPTransferMoney);\n"]},"metadata":{},"sourceType":"module"}