{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/ReviewTransfer/ReviewTransferContainer.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { ReviewTransfer } from \"./ReviewTransfer\";\nimport { config } from \"./config\";\nimport { transferMoney } from \"../../API\";\nexport var ReviewTransferContainer = function ReviewTransferContainer(props) {\n  var _route$params3;\n\n  var _useState = useState({\n    token: \"\",\n    otp: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      code = _useState2[0],\n      setCode = _useState2[1];\n\n  var navigation = props.navigation,\n      route = props.route;\n  useEffect(function () {\n    var _route$params;\n\n    if (!((_route$params = route.params) == null ? void 0 : _route$params.transferMoneyData)) {\n      Alert.alert(\"Review Transfer Error\", \"You must fill up the Transfer Money form first,\", [{\n        text: \"Go Back\",\n        onPress: navigation.goBack\n      }]);\n    }\n  }, []);\n\n  var handleSubmit = function handleSubmit() {\n    var _route$params2;\n\n    navigation.navigate(\"OTPTransferMoney\", {\n      formData: (_route$params2 = route.params) == null ? void 0 : _route$params2.transferMoneyData\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(ReviewTransfer, {\n    data: (_route$params3 = route.params) == null ? void 0 : _route$params3.transferMoneyData,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }));\n};\nReviewTransferContainer.propTypes = {\n  route: PropTypes.shape({\n    params: PropTypes.shape({\n      transferMoneyData: PropTypes.shape({\n        amount: PropTypes.string.isRequired,\n        bankCode: PropTypes.string.isRequired,\n        recipientAccountNumber: PropTypes.string.isRequired,\n        recipientMobileNumber: PropTypes.string.isRequired,\n        recipientAccountName: PropTypes.string,\n        sourceAccount: PropTypes.object.isRequired\n      }).isRequired\n    })\n  })\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return function () {\n    return {};\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReviewTransferContainer);","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/ReviewTransfer/ReviewTransferContainer.js"],"names":["React","useEffect","useState","PropTypes","connect","ReviewTransfer","config","transferMoney","ReviewTransferContainer","props","token","otp","code","setCode","navigation","route","params","transferMoneyData","Alert","alert","text","onPress","goBack","handleSubmit","navigate","formData","propTypes","shape","amount","string","isRequired","bankCode","recipientAccountNumber","recipientMobileNumber","recipientAccountName","sourceAccount","object","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAIA,SAASC,cAAT;AAKA,SAASC,MAAT;AACA,SAASC,aAAT;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACxBP,QAAQ,CAAC;AAC/BQ,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,GAAG,EAAE;AAF0B,GAAD,CADgB;AAAA;AAAA,MACzCC,IADyC;AAAA,MACnCC,OADmC;;AAAA,MAMxCC,UANwC,GAMlBL,KANkB,CAMxCK,UANwC;AAAA,MAM5BC,KAN4B,GAMlBN,KANkB,CAM5BM,KAN4B;AAQhDd,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd,QAAI,mBAACc,KAAK,CAACC,MAAP,qBAAC,cAAcC,iBAAf,CAAJ,EAAsC;AACpCC,MAAAA,KAAK,CAACC,KAAN,CACE,uBADF,EAEE,iDAFF,EAGE,CAAC;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAEP,UAAU,CAACQ;AAAvC,OAAD,CAHF;AAKD;AACF,GARQ,EAQN,EARM,CAAT;;AAUA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AACzBT,IAAAA,UAAU,CAACU,QAAX,CAAoB,kBAApB,EAAwC;AACtCC,MAAAA,QAAQ,oBAAEV,KAAK,CAACC,MAAR,qBAAE,eAAcC;AADc,KAAxC;AAGD,GAJD;;AAMA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,IAAI,oBAAEF,KAAK,CAACC,MAAR,qBAAE,eAAcC,iBADtB;AAEE,IAAA,QAAQ,EAAEM,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CAhCM;AAkCPf,uBAAuB,CAACkB,SAAxB,GAAoC;AAClCX,EAAAA,KAAK,EAAEZ,SAAS,CAACwB,KAAV,CAAgB;AACrBX,IAAAA,MAAM,EAAEb,SAAS,CAACwB,KAAV,CAAgB;AACtBV,MAAAA,iBAAiB,EAAEd,SAAS,CAACwB,KAAV,CAAgB;AACjCC,QAAAA,MAAM,EAAEzB,SAAS,CAAC0B,MAAV,CAAiBC,UADQ;AAEjCC,QAAAA,QAAQ,EAAE5B,SAAS,CAAC0B,MAAV,CAAiBC,UAFM;AAGjCE,QAAAA,sBAAsB,EAAE7B,SAAS,CAAC0B,MAAV,CAAiBC,UAHR;AAIjCG,QAAAA,qBAAqB,EAAE9B,SAAS,CAAC0B,MAAV,CAAiBC,UAJP;AAKjCI,QAAAA,oBAAoB,EAAE/B,SAAS,CAAC0B,MALC;AAMjCM,QAAAA,aAAa,EAAEhC,SAAS,CAACiC,MAAV,CAAiBN;AANC,OAAhB,EAOhBA;AARmB,KAAhB;AADa,GAAhB;AAD2B,CAApC;;AAeA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAW,YAAM;AACvC,WAAO,EAAP;AACD,GAFuB;AAAA,CAAxB;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO,EAAP;AACD,CAFD;;AAIA,eAAepC,OAAO,CACpBiC,eADoB,EAEpBE,kBAFoB,CAAP,CAGb/B,uBAHa,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Alert } from \"react-native\";\n\n// Form Component\nimport { ReviewTransfer } from \"./ReviewTransfer\";\n\n// Custom Component Here\n\n// Others\nimport { config } from \"./config\";\nimport { transferMoney } from \"../../API\";\n\nexport const ReviewTransferContainer = (props) => {\n  const [code, setCode] = useState({\n    token: \"\",\n    otp: \"\",\n  });\n\n  const { navigation, route } = props;\n\n  useEffect(() => {\n    if (!route.params?.transferMoneyData) {\n      Alert.alert(\n        \"Review Transfer Error\",\n        \"You must fill up the Transfer Money form first,\",\n        [{ text: \"Go Back\", onPress: navigation.goBack }]\n      );\n    }\n  }, []);\n\n  const handleSubmit = () => {\n    navigation.navigate(\"OTPTransferMoney\", {\n      formData: route.params?.transferMoneyData,\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <ReviewTransfer\n        data={route.params?.transferMoneyData}\n        onSubmit={handleSubmit}\n      />\n    </React.Fragment>\n  );\n};\n\nReviewTransferContainer.propTypes = {\n  route: PropTypes.shape({\n    params: PropTypes.shape({\n      transferMoneyData: PropTypes.shape({\n        amount: PropTypes.string.isRequired,\n        bankCode: PropTypes.string.isRequired,\n        recipientAccountNumber: PropTypes.string.isRequired,\n        recipientMobileNumber: PropTypes.string.isRequired,\n        recipientAccountName: PropTypes.string,\n        sourceAccount: PropTypes.object.isRequired,\n      }).isRequired,\n    }),\n  }),\n};\n\nconst mapStateToProps = (state) => () => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ReviewTransferContainer);\n"]},"metadata":{},"sourceType":"module"}