{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as NavigationService from \"../navigation/NavigationService\";\nimport { Toast } from \"native-base\";\nimport axios from \"axios\";\nimport { postMethod, postOnly, getDataOnly, alertBox } from \"./axiosCalls\";\nimport { accountLink, accountLinkError, accountLinkInitialize, accountLinkSuccess } from \"../redux/account/actions\";\nimport * as Profile from \"store/profile\";\nimport * as TYPE from \"./types\";\nimport { dispatcher, optionsDispatch, APIErrorLogging } from \"../library/helpers\";\n\nvar getTokenByRefreshToken = function getTokenByRefreshToken(refreshToken) {\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"refresh_token\",\n      refresh_token: refreshToken\n    }\n  };\n};\n\nvar login = function login(username, password) {\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"signin\",\n      username: username,\n      password: password\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.LOGIN\n    });\n    return postOnly(json_data).then(function (response) {\n      if (response.data.success) {\n        dispatch({\n          type: TYPE.LOGIN_SUCCESS,\n          payload: response.data\n        });\n        dispatch({\n          type: TYPE.STORE_TOKENS,\n          payload: {\n            tokens: {\n              access_token: response.data.access_token,\n              id_token: response.data.id_token,\n              refresh_token: response.data.refresh_token\n            },\n            expires_in: response.data.expires_in\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE.LOGIN_ERROR,\n          payload: response.data\n        });\n        alertBox(response.data.message);\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"login\", error);\n      dispatch({\n        type: TYPE.LOGIN_ERROR,\n        payload: error\n      });\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar loginByFingerprint = function loginByFingerprint(refreshToken) {\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"refresh_token\",\n      refresh_token: refreshToken\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.LOGIN\n    });\n    return postOnly(json_data).then(function (response) {\n      if (response.data.success) {\n        dispatch({\n          type: TYPE.LOGIN_SUCCESS,\n          payload: response.data\n        });\n        dispatch({\n          type: TYPE.STORE_TOKENS,\n          payload: {\n            tokens: {\n              access_token: response.data.access_token,\n              id_token: response.data.id_token,\n              refresh_token: response.data.refresh_token\n            },\n            expires_in: response.data.expires_in\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE.LOGIN_ERROR,\n          payload: response.data\n        });\n        alertBox(response.data.message);\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"loginByFingerprint\", error);\n      dispatch({\n        type: TYPE.LOGIN_ERROR,\n        payload: error\n      });\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar forgotPassword = function forgotPassword(username) {\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"forgotpassword\",\n      user: username\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.FORGOT_PASSWORD\n    });\n    return postOnly(json_data).then(function (response) {\n      if (response.data.success) {\n        dispatch({\n          type: TYPE.FORGOT_PASSWORD_SUCCESS,\n          payload: {\n            is_fetching: false,\n            success: true,\n            message: response.data.message\n          }\n        });\n        alertBox(response.data.message);\n        NavigationService.navigate(\"Login\");\n      } else {\n        dispatch({\n          type: TYPE.FORGOT_PASSWORD_ERROR,\n          payload: {\n            is_fetching: false,\n            sucess: false,\n            message: response.data.message\n          }\n        });\n        alertBox(response.data.message);\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"forgotPassword\", error);\n      dispatch({\n        type: TYPE.FORGOT_PASSWORD_ERROR,\n        payload: {\n          is_fetching: false,\n          message: error\n        }\n      });\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar updateUserInformation = function updateUserInformation(_ref) {\n  var id = _ref.id,\n      emails = _ref.emails,\n      phoneNumbers = _ref.phoneNumbers,\n      userName = _ref.userName,\n      password = _ref.password,\n      name = _ref.name;\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"updateUserByID\",\n      user_data: {\n        id: id,\n        active: true,\n        emails: emails,\n        phoneNumbers: phoneNumbers,\n        userName: userName,\n        password: password ? password : null,\n        name: name\n      }\n    }\n  };\n  Object.keys(json_data.body.user_data).forEach(function (key) {\n    return json_data.body.user_data[key] == null && delete json_data.body.user_data[key];\n  });\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.UPDATE_PROFILE\n    });\n    return postOnly(json_data).then(function (response) {\n      if (response.data.success) {\n        dispatch({\n          type: TYPE.UPDATE_PROFILE_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: TYPE.UPDATE_PROFILE_ERROR,\n          payload: {\n            message: \"\"\n          }\n        });\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"updateUserInformation\", error);\n      dispatch({\n        type: TYPE.UPDATE_PROFILE_ERROR,\n        payload: {\n          message: error\n        }\n      });\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar checkEmail = function checkEmail(userId) {\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    reducer_type: TYPE.CHECK_EMAIL,\n    params: {\n      action: \"isEmailVerified\",\n      userid: userId\n    }\n  };\n  return postMethod(json_data);\n};\n\nvar resend_email = function resend_email(userId) {\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"resendUserVerification\",\n      userid: userId\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.RESEND_EMAIL\n    });\n    return postOnly(json_data).then(function (response) {\n      if (response.data.success) {\n        dispatch({\n          type: TYPE.RESEND_EMAIL_SUCCESS,\n          payload: response.data\n        });\n        alertBox(\"Email Verification successfully resent. Please check your email.\");\n      } else {\n        var error = JSON.parse(response.data.log_error);\n        alertBox(error.detail);\n        dispatch({\n          type: TYPE.RESEND_EMAIL_ERROR,\n          payload: response.data\n        });\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"resend_email\", error);\n      dispatch({\n        type: TYPE.RESEND_EMAIL_ERROR,\n        payload: error\n      });\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar signup = function signup(userdata) {\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"signup\",\n      email: userdata.email,\n      password: userdata.password,\n      givenName: userdata.givenName,\n      middleName: userdata.middleName,\n      familyName: userdata.familyName,\n      phoneNumber: userdata.phoneNumber\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.SIGNUP\n    });\n    return postOnly(json_data).then(function (response) {\n      if (response.data.success) {\n        dispatch({\n          type: TYPE.SIGNUP_SUCCESS,\n          payload: response.data\n        });\n        Profile.setSignUpData(response.data);\n        NavigationService.navigate(\"EmailVerification\");\n      } else {\n        var error = JSON.parse(response.data.log_error);\n        alertBox(error.detail);\n        dispatch({\n          type: TYPE.SIGNUP_ERROR,\n          payload: response.data\n        });\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"signup\", error);\n      dispatch({\n        type: TYPE.SIGNUP_ERROR,\n        payload: error\n      });\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar checkAccount = function checkAccount(_ref2) {\n  var first_name = _ref2.first_name,\n      middle_name = _ref2.middle_name,\n      last_name = _ref2.last_name,\n      date_of_birth = _ref2.date_of_birth;\n  var json_data = {\n    path: \"byteperbyte/CISCheck\",\n    params: {\n      first_name: first_name,\n      middle_name: middle_name,\n      last_name: last_name,\n      date_of_birth: date_of_birth\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.REQUEST_OTP\n    });\n    return getDataOnly(json_data).then(function (response) {\n      var response_data = response.data.data[\"Register.Info\"];\n      var has_data = !response_data.ErrorMsg;\n\n      if (has_data) {\n        dispatch({\n          type: TYPE.REQUEST_OTP_SUCCESS,\n          payload: {\n            token: response_data.token\n          }\n        });\n        NavigationService.navigate(\"LinkAccountOTP\");\n      } else {\n        dispatch({\n          type: TYPE.REQUEST_OTP_ERROR,\n          payload: {\n            message: response_data.ErrorMsg\n          }\n        });\n        alertBox(response_data.ErrorMsg);\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"checkAccount\", error);\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n      dispatch({\n        type: REQUEST_OTP_ERROR,\n        payload: {\n          isFetching: false,\n          success: false,\n          message: response_data.ErrorMsg,\n          token: \"\"\n        }\n      });\n    });\n  };\n};\n\nvar getAccounts = function getAccounts(cisno) {\n  var json_data = {\n    path: \"byteperbyte/CISAccountInquiry\",\n    params: {\n      cisno: cisno\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.FETCH_ACCOUNTS\n    });\n    return getDataOnly(json_data).then(function (response) {\n      if (response.data.status == \"ok\") {\n        var accountList = {\n          LN: {\n            title: \"Loan Accounts\",\n            accounts: {},\n            accountsById: []\n          },\n          TD: {\n            title: \"Time Deposit\",\n            accounts: {},\n            accountsById: []\n          },\n          SA: {\n            title: \"Savings Account\",\n            accounts: {},\n            accountsById: []\n          }\n        };\n        var output = response.data;\n\n        if (output.data[\"Account.Info\"].accts) {\n          var accounts = output.data[\"Account.Info\"].accts.a;\n\n          if (accounts instanceof Array) {\n            accounts.map(function (account, index) {\n              if (accountList[account.accttype]) {\n                accountList[account.accttype].accounts[account.AcctNoFormatted] = {\n                  key: index,\n                  title: account.Name1,\n                  acctno: account.AcctNoFormatted,\n                  balance: \"PHP \" + account.LedgerFormatted\n                };\n                accountList[account.accttype].accountsById.push(account.AcctNoFormatted);\n              }\n            });\n          } else {\n            if (accountList[accounts.accttype]) {\n              accountList[accounts.accttype].accounts[accounts.AcctNoFormatted] = {\n                key: 1,\n                title: accounts.Name1,\n                acctno: accounts.AcctNoFormatted,\n                balance: \"PHP \" + accounts.LedgerFormatted\n              };\n              accountList[accounts.accttype].accountsById.push(accounts.AcctNoFormatted);\n            }\n          }\n        }\n\n        dispatch({\n          type: TYPE.FETCH_ACCOUNTS_SUCCESS,\n          payload: accountList\n        });\n      } else {\n        dispatch({\n          type: TYPE.FETCH_ACCOUNTS_ERROR,\n          payload: {\n            is_fetching: false,\n            error: true,\n            list: []\n          }\n        });\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"getAccounts\", error);\n      dispatch({\n        type: TYPE.FETCH_ACCOUNTS_ERROR,\n        payload: {\n          is_fetching: false,\n          error: true,\n          list: []\n        }\n      });\n      throw error;\n    });\n  };\n};\n\nvar getAccountHistory = function getAccountHistory(acctno, count) {\n  var json_data = {\n    path: \"byteperbyte/AccountInquiryHistory\",\n    params: {\n      acctno: acctno,\n      count: count\n    }\n  };\n  return getDataOnly(json_data);\n};\n\nvar getAccountInfo = function getAccountInfo(acctno) {\n  var json_data = {\n    path: \"byteperbyte/AccountsInfo\",\n    params: {\n      acctno: acctno\n    }\n  };\n  return getDataOnly(json_data);\n};\n\nvar getAccountDetails = function getAccountDetails(acctno, count) {\n  var accountDetails = {\n    id: acctno,\n    balance: {\n      raw: \"\",\n      formatted: \"\"\n    },\n    currency: \"\",\n    history: [],\n    name: \"\",\n    product: \"\",\n    status: {\n      type: \"\",\n      code: \"\"\n    },\n    type: {\n      raw: \"\",\n      formatted: \"\"\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.FETCH_ACCOUNTDETAILS\n    });\n    axios.all([getAccountInfo(acctno), getAccountHistory(acctno, count)]).then(axios.spread(function (info, history) {\n      if (info.data.data[\"Account.Info\"].ErrorMsg !== \"\") {\n        alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n        NavigationService.navigate(\"Dashboard\");\n        dispatch({\n          type: TYPE.FETCH_ACCOUNTINFO_ERROR\n        });\n        return;\n      }\n\n      if (history.data.data[\"Account.Info\"].ErrorMsg !== \"\") {\n        alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n        NavigationService.navigate(\"Dashboard\");\n        dispatch({\n          type: TYPE.FETCH_ACCOUNTSHISTORY_ERROR\n        });\n        return;\n      }\n\n      var _info$data$data$Accou = info.data.data[\"Account.Info\"],\n          AccountStatus = _info$data$data$Accou.AccountStatus,\n          AccountStatusNo = _info$data$data$Accou.AccountStatusNo,\n          AcctType = _info$data$data$Accou.AcctType,\n          AcctTypeFormatted = _info$data$data$Accou.AcctTypeFormatted,\n          Available = _info$data$data$Accou.Available,\n          AvailableFormatted = _info$data$data$Accou.AvailableFormatted,\n          CurrencyCode = _info$data$data$Accou.CurrencyCode,\n          Name1 = _info$data$data$Accou.Name1,\n          Product = _info$data$data$Accou.Product;\n      accountDetails.balance = {\n        raw: Available ? Available : \"\",\n        formatted: AvailableFormatted ? AvailableFormatted : \"\"\n      };\n      accountDetails.type = {\n        raw: AcctType ? AvailableFormatted : \"\",\n        formatted: AcctTypeFormatted ? AcctTypeFormatted : \"\"\n      };\n      accountDetails.status = {\n        type: AccountStatus ? AccountStatus : \"\",\n        code: AccountStatusNo ? AccountStatusNo : \"\"\n      };\n      accountDetails.currency = CurrencyCode ? CurrencyCode : \"\";\n\n      if (history.data.data[\"Account.Info\"].tis !== null && history.data.data[\"Account.Info\"].tis.ti instanceof Array) {\n        accountDetails.history = history.data.data[\"Account.Info\"].tis.ti.map(function (history, index) {\n          return {\n            id: index.toString(),\n            title: history.tn,\n            date: history.td,\n            amount: history.dr ? parseInt(history.dr) : -Math.abs(parseInt(history.cr))\n          };\n        });\n      }\n\n      accountDetails.name = Name1 ? Name1 : \"\";\n      accountDetails.product = Product ? Product : \"\";\n      dispatch({\n        type: TYPE.FETCH_ACCOUNTDETAILS_SUCCESS,\n        payload: {\n          account: _defineProperty({}, acctno, accountDetails)\n        }\n      });\n    })).catch(function (error) {\n      APIErrorLogging(\"getAccountDetails\", error);\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n      NavigationService.navigate(\"Dashboard\");\n      dispatch({\n        type: TYPE.FETCH_ACCOUNTDETAILS_ERROR\n      });\n    });\n  };\n};\n\nvar createBankAccount = function createBankAccount(accountData) {\n  var json_data = {\n    path: \"sunsavings/SSCreateAccountRequest\",\n    body: accountData\n  };\n  return postOnly(json_data);\n};\n\nvar addBankAccount = function addBankAccount(_ref3) {\n  var id = _ref3.id,\n      accountData = _ref3.accountData,\n      access_token = _ref3.access_token;\n  return function (dispatch) {\n    return putAttributes({\n      name: id,\n      value: accountData,\n      access_token: access_token\n    }).then(function (_ref4) {\n      var _ref4$data = _ref4.data,\n          data = _ref4$data.data,\n          status = _ref4$data.status,\n          msg = _ref4$data.msg;\n    }).catch(function (error) {\n      APIErrorLogging(\"addBankAccount\", error);\n      dispatch({\n        type: TYPE.ADD_ACCOUNT_ERROR\n      });\n    });\n  };\n};\n\nvar linkAccount = function linkAccount(_ref5) {\n  var cis_no = _ref5.cis_no,\n      access_token = _ref5.access_token;\n  return putAttributes({\n    name: \"cis_no\",\n    value: cis_no,\n    access_token: access_token\n  });\n};\n\nvar linkAccountWithDispatch = function linkAccountWithDispatch(_ref6) {\n  var cis_no = _ref6.cis_no,\n      access_token = _ref6.access_token;\n  return function (dispatch) {\n    dispatch(accountLink());\n    return linkAccount({\n      cis_no: cis_no,\n      access_token: access_token\n    }).then(function (_ref7) {\n      var data = _ref7.data;\n\n      if (data.success == true) {\n        dispatch(accountLinkSuccess());\n      } else {\n        dispatch(accountLinkError(\"Error\"));\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"linkAccountWithDispatch\", error);\n      dispatch(accountLinkError(error));\n    });\n  };\n};\n\nvar createBankAccout = function createBankAccout(_ref8) {\n  var uniqueId = _ref8.uniqueId,\n      attributes = _ref8.attributes,\n      access_token = _ref8.access_token;\n  return putAttributes({\n    name: uniqueId,\n    value: attributes,\n    access_token: access_token\n  }).then(function (_ref9) {\n    var data = _ref9.data;\n\n    if (data.status == \"error\") {} else {\n      NavigationService.navigate(\"Dashboard\");\n      alertBox(\"Created Bank Account successfully!\");\n    }\n  }).catch(function (error) {\n    APIErrorLogging(\"createBankAccout\", error);\n  });\n};\n\nvar putAttributes = function putAttributes(_ref10) {\n  var name = _ref10.name,\n      value = _ref10.value,\n      access_token = _ref10.access_token;\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"put_attribute_name\",\n      attribute_name: name,\n      attribute_value: value,\n      access_token: access_token\n    }\n  };\n  return postOnly(json_data);\n};\n\nvar CISVerify = function CISVerify(_ref11) {\n  var token = _ref11.token,\n      otp = _ref11.otp;\n  var json_data = {\n    path: \"byteperbyte/CISVerify\",\n    params: {\n      token: token,\n      otp: otp\n    }\n  };\n  return getDataOnly(json_data);\n};\n\nvar getProfile = function getProfile(_ref12) {\n  var id = _ref12.id;\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"getProfile\",\n      user_id: id\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.FETCH_PROFILE\n    });\n    return postOnly(json_data).then(function (response) {\n      if (response.data.success) {\n        var attributes = response.data.attributes;\n        var _response$data$identi = response.data.identities[0].idpUserInfo,\n            displayName = _response$data$identi.displayName,\n            emails = _response$data$identi.emails,\n            _id = _response$data$identi.id,\n            _response$data$identi2 = _response$data$identi.name,\n            givenName = _response$data$identi2.givenName,\n            middleName = _response$data$identi2.middleName,\n            familyName = _response$data$identi2.familyName,\n            phoneNumbers = _response$data$identi.phoneNumbers;\n        dispatch({\n          type: TYPE.FETCH_PROFILE_SUCCESS,\n          payload: {\n            id: _id,\n            attributes: attributes,\n            emails: emails,\n            phoneNumbers: phoneNumbers,\n            name: {\n              displayName: displayName,\n              givenName: givenName,\n              middleName: middleName,\n              familyName: familyName\n            }\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE.FETCH_PROFILE_ERROR,\n          payload: {\n            message: response.data.message.error\n          }\n        });\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"getProfile\", error);\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar saveProfile = function saveProfile(_ref13) {\n  var id = _ref13.id,\n      attributes = _ref13.attributes,\n      givenName = _ref13.givenName,\n      middleName = _ref13.middleName,\n      familyName = _ref13.familyName,\n      emails = _ref13.emails,\n      phoneNumber = _ref13.phoneNumber;\n  var json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"updateProfile\",\n      user_data: {\n        id: id,\n        emails: emails,\n        phoneNumber: phoneNumber,\n        given_name: givenName,\n        middle_name: middleName,\n        family_name: familyName,\n        attributes: attributes\n      }\n    }\n  };\n  Object.keys(json_data.body.user_data).forEach(function (key) {\n    return json_data.body.user_data[key] == null && delete json_data.body.user_data[key];\n  });\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.UPDATE_PROFILE\n    });\n    return postOnly(json_data).then(function (_ref14) {\n      var data = _ref14.data;\n\n      if (data.errorCode && data.errorCode !== \"\") {\n        dispatch({\n          type: TYPE.UPDATE_PROFILE_ERROR,\n          payload: {\n            message: data.message\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE.UPDATE_PROFILE_SUCCESS,\n          payload: {\n            message: \"\"\n          }\n        });\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"saveProfile\", error);\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar loan = function loan(_ref15) {\n  var user_id = _ref15.user_id,\n      firstName = _ref15.firstName,\n      middleName = _ref15.middleName,\n      lastName = _ref15.lastName,\n      birthDate = _ref15.birthDate,\n      amount = _ref15.amount,\n      perCutOff = _ref15.perCutOff,\n      months = _ref15.months;\n  var json_data = {\n    path: \"sunsavings/SSCreateLoanRequestMobile\",\n    body: {\n      user_id: user_id,\n      firstName: firstName,\n      middleName: middleName,\n      lastName: lastName,\n      birthDate: birthDate,\n      amount: amount,\n      perCutOff: perCutOff,\n      months: months\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.FETCH\n    });\n    return postOnly(json_data).then(function (response) {\n      var data = response.data;\n\n      if (data.status == \"ok\") {\n        Toast.show({\n          text: data.msg,\n          duration: 3000,\n          type: \"success\"\n        });\n        dispatch({\n          type: TYPE.FETCH_SUCCESS,\n          payload: {\n            message: data.msg\n          }\n        });\n      } else {\n        Toast.show({\n          text: data.msg,\n          duration: 3000,\n          type: \"danger\"\n        });\n        dispatch({\n          type: TYPE.FETCH_ERROR,\n          payload: {\n            message: data.msg\n          }\n        });\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"loan\", error);\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n  };\n};\n\nvar searchByCity = function searchByCity(city) {\n  var json_data = {\n    path: \"/byteperbyte/MISSearch\",\n    params: {\n      search: city\n    }\n  };\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.SEARCH_CITY\n    });\n    return getDataOnly(json_data).then(function (response) {\n      dispatcher({\n        dispatch: dispatch,\n        action: TYPE.SEARCH_CITY_SUCCESS,\n        payload: response.data.data\n      });\n    }).catch(function (error) {\n      APIErrorLogging(\"searchByCity\", error);\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n      dispatcher({\n        dispatch: dispatch,\n        action: TYPE.SEARCH_CITY_ERROR,\n        payload: {}\n      });\n    });\n  };\n};\n\nvar getList = function getList(type, additionalParams) {\n  var json_data = {\n    path: \"/byteperbyte//MISDropDown\",\n    params: _objectSpread({\n      type: type\n    }, additionalParams)\n  };\n  return getDataOnly(json_data);\n};\n\nvar getBarangays = function getBarangays(city) {\n  return function (dispatch) {\n    dispatcher({\n      dispatch: dispatch,\n      action: TYPE.FETCH_BARANGAYS\n    });\n    return getList(\"address\", {\n      city_code: city\n    }).then(function (_ref16) {\n      var data = _ref16.data;\n\n      if (data.status == \"ok\" && data.data instanceof Array) {\n        var lists = data.data;\n        var payload = {\n          data: {},\n          listsById: []\n        };\n        lists.map(function (item) {\n          payload.data[item.id_code] = {\n            label: item.description,\n            value: item.path\n          };\n          payload.listsById.push(item.id_code);\n        });\n        dispatcher({\n          dispatch: dispatch,\n          action: TYPE.FETCH_BARANGAYS_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatcher({\n          dispatch: dispatch,\n          action: TYPE.FETCH_BARANGAYS_ERROR\n        });\n      }\n    }).catch(function (error) {\n      APIErrorLogging(\"getBarangays\", error);\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n      dispatcher({\n        dispatch: dispatch,\n        action: TYPE.FETCH_BARANGAYS_ERROR\n      });\n    });\n  };\n};\n\nvar getLists = function getLists() {\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.FETCH_LISTS\n    });\n    axios.all([getList(\"civil_status\"), getList(\"home_ownership\"), getList(\"id_list\"), getList(\"job_title\"), getList(\"nationality\"), getList(\"source_of_fund\")]).then(axios.spread(function (civilStatus, homeOwnership, idList, jobTitle, nationality, sourceOfFund) {\n      optionsDispatch({\n        data: civilStatus.data,\n        type: \"CIVILSTATUS\",\n        dispatch: dispatch\n      });\n      optionsDispatch({\n        data: homeOwnership.data,\n        type: \"HOMEOWNERSHIP\",\n        dispatch: dispatch\n      });\n      optionsDispatch({\n        data: idList.data,\n        type: \"IDTYPE\",\n        dispatch: dispatch\n      });\n      optionsDispatch({\n        data: jobTitle.data,\n        type: \"JOBTITLE\",\n        dispatch: dispatch\n      });\n      optionsDispatch({\n        data: nationality.data,\n        type: \"NATIONALITY\",\n        dispatch: dispatch\n      });\n      optionsDispatch({\n        data: sourceOfFund.data,\n        type: \"FUNDSOURCE\",\n        dispatch: dispatch\n      });\n      dispatch({\n        type: TYPE.FETCH_LISTS_SUCCESS\n      });\n    })).catch(function (error) {\n      APIErrorLogging(\"getLists\", error);\n      alertBox(\"Ooops! There's something wrong connecting to the server. Please try again.\");\n      dispatch({\n        type: TYPE.FETCH_LISTS_ERROR\n      });\n    });\n  };\n};\n\nvar uploadIDs = function uploadIDs(id1, id2) {\n  return axios.all([upload({\n    file_name: \"id1.png\",\n    content_type: \"image\",\n    data64: id1\n  }), upload({\n    file_name: \"id2.png\",\n    content_type: \"image\",\n    data64: id2\n  })]);\n};\n\nvar upload = function upload(_ref17) {\n  var file_name = _ref17.file_name,\n      content_type = _ref17.content_type,\n      data64 = _ref17.data64;\n  var json_data = {\n    path: \"sunsavings/SSFileUpload\",\n    body: {\n      file_name: file_name,\n      content_type: content_type,\n      data64: data64\n    }\n  };\n  return postOnly(json_data);\n};\n\nvar requestOTP = function requestOTP(_ref18) {\n  var mobile_number = _ref18.mobile_number,\n      email = _ref18.email,\n      save_info = _ref18.save_info;\n  var json_data = {\n    path: \"tm/otp_sunsavings\",\n    body: {\n      mobile_number: mobile_number,\n      email: email,\n      save_info: save_info\n    }\n  };\n  Object.keys(json_data.body).forEach(function (key) {\n    return json_data.body[key] == null && delete json_data.body[key];\n  });\n  return postOnly(json_data);\n};\n\nvar verifyOTPBPB = function verifyOTPBPB(_ref19) {\n  var token = _ref19.token,\n      otp = _ref19.otp;\n  var json_data = {\n    path: \"byteperbyte/CISVerify\",\n    params: {\n      token: token,\n      otp: otp\n    }\n  };\n  return getDataOnly(json_data);\n};\n\nvar verifyOTPBPBwithDispatch = function verifyOTPBPBwithDispatch(payload) {\n  return function (dispatch) {\n    dispatch({\n      type: TYPE.CHECK_OTP\n    });\n    return verifyOTPBPB(payload).then(function (_ref20) {\n      var data = _ref20.data.data;\n\n      if (data[\"Register.Info\"].cis_no) {\n        dispatch({\n          type: TYPE.CHECK_OTP_SUCCESS,\n          payload: {\n            id: data[\"Register.Info\"].cis_no\n          }\n        });\n        dispatch({\n          type: TYPE.CHECK_OTPTM_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: TYPE.CHECK_OTP_ERROR,\n          payload: {\n            message: data[\"Register.Info\"].ErrorMsg\n          }\n        });\n      }\n    }).catch(function (error) {\n      dispatch({\n        type: TYPE.CHECK_OTP_ERROR,\n        payload: {\n          message: error\n        }\n      });\n    });\n  };\n};\n\nvar verifyOTP = function verifyOTP(_ref21) {\n  var token = _ref21.token,\n      otp = _ref21.otp;\n  var json_data = {\n    path: \"tm/otp_verify\",\n    body: {\n      token: token + otp\n    }\n  };\n  return postOnly(json_data);\n};\n\nvar createBankAccountOTP = function createBankAccountOTP(_ref22) {\n  var mobileNumber = _ref22.mobileNumber,\n      data = _ref22.data;\n  return function (dispatch) {\n    requestOTP({\n      mobile_number: mobileNumber,\n      save_info: data\n    }).then(function (response) {}).catch(function (error) {});\n  };\n};\n\nvar checkStatus = function checkStatus(response) {\n  return response.data.status == \"ok\";\n};\n\nexport default {\n  login: login,\n  loginByFingerprint: loginByFingerprint,\n  forgotPassword: forgotPassword,\n  updateUserInformation: updateUserInformation,\n  checkEmail: checkEmail,\n  resend_email: resend_email,\n  signup: signup,\n  checkAccount: checkAccount,\n  getAccounts: getAccounts,\n  getAccountHistory: getAccountHistory,\n  getAccountInfo: getAccountInfo,\n  getAccountDetails: getAccountDetails,\n  createBankAccount: createBankAccount,\n  addBankAccount: addBankAccount,\n  CISVerify: CISVerify,\n  linkAccount: linkAccount,\n  linkAccountWithDispatch: linkAccountWithDispatch,\n  createBankAccout: createBankAccout,\n  getProfile: getProfile,\n  saveProfile: saveProfile,\n  loan: loan,\n  getList: getList,\n  getLists: getLists,\n  getBarangays: getBarangays,\n  searchByCity: searchByCity,\n  upload: upload,\n  uploadIDs: uploadIDs,\n  requestOTP: requestOTP,\n  verifyOTP: verifyOTP,\n  verifyOTPBPB: verifyOTPBPB,\n  verifyOTPBPBwithDispatch: verifyOTPBPBwithDispatch\n};","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/actions/api.js"],"names":["NavigationService","Toast","axios","postMethod","postOnly","getDataOnly","alertBox","accountLink","accountLinkError","accountLinkInitialize","accountLinkSuccess","Profile","TYPE","dispatcher","optionsDispatch","APIErrorLogging","getTokenByRefreshToken","refreshToken","json_data","path","body","action","refresh_token","login","username","password","dispatch","type","LOGIN","then","response","data","success","LOGIN_SUCCESS","payload","STORE_TOKENS","tokens","access_token","id_token","expires_in","LOGIN_ERROR","message","catch","error","loginByFingerprint","forgotPassword","user","FORGOT_PASSWORD","FORGOT_PASSWORD_SUCCESS","is_fetching","navigate","FORGOT_PASSWORD_ERROR","sucess","updateUserInformation","id","emails","phoneNumbers","userName","name","user_data","active","Object","keys","forEach","key","UPDATE_PROFILE","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_ERROR","checkEmail","userId","reducer_type","CHECK_EMAIL","params","userid","resend_email","RESEND_EMAIL","RESEND_EMAIL_SUCCESS","JSON","parse","log_error","detail","RESEND_EMAIL_ERROR","signup","userdata","email","givenName","middleName","familyName","phoneNumber","SIGNUP","SIGNUP_SUCCESS","setSignUpData","SIGNUP_ERROR","checkAccount","first_name","middle_name","last_name","date_of_birth","REQUEST_OTP","response_data","has_data","ErrorMsg","REQUEST_OTP_SUCCESS","token","REQUEST_OTP_ERROR","isFetching","getAccounts","cisno","FETCH_ACCOUNTS","status","accountList","LN","title","accounts","accountsById","TD","SA","output","accts","a","Array","map","account","index","accttype","AcctNoFormatted","Name1","acctno","balance","LedgerFormatted","push","FETCH_ACCOUNTS_SUCCESS","FETCH_ACCOUNTS_ERROR","list","getAccountHistory","count","getAccountInfo","getAccountDetails","accountDetails","raw","formatted","currency","history","product","code","FETCH_ACCOUNTDETAILS","all","spread","info","FETCH_ACCOUNTINFO_ERROR","FETCH_ACCOUNTSHISTORY_ERROR","AccountStatus","AccountStatusNo","AcctType","AcctTypeFormatted","Available","AvailableFormatted","CurrencyCode","Product","tis","ti","toString","tn","date","td","amount","dr","parseInt","Math","abs","cr","FETCH_ACCOUNTDETAILS_SUCCESS","FETCH_ACCOUNTDETAILS_ERROR","createBankAccount","accountData","addBankAccount","putAttributes","value","msg","ADD_ACCOUNT_ERROR","linkAccount","cis_no","linkAccountWithDispatch","createBankAccout","uniqueId","attributes","attribute_name","attribute_value","CISVerify","otp","getProfile","user_id","FETCH_PROFILE","identities","idpUserInfo","displayName","FETCH_PROFILE_SUCCESS","FETCH_PROFILE_ERROR","saveProfile","given_name","family_name","errorCode","loan","firstName","lastName","birthDate","perCutOff","months","FETCH","show","text","duration","FETCH_SUCCESS","FETCH_ERROR","searchByCity","city","search","SEARCH_CITY","SEARCH_CITY_SUCCESS","SEARCH_CITY_ERROR","getList","additionalParams","getBarangays","FETCH_BARANGAYS","city_code","lists","listsById","item","id_code","label","description","FETCH_BARANGAYS_SUCCESS","FETCH_BARANGAYS_ERROR","getLists","FETCH_LISTS","civilStatus","homeOwnership","idList","jobTitle","nationality","sourceOfFund","FETCH_LISTS_SUCCESS","FETCH_LISTS_ERROR","uploadIDs","id1","id2","upload","file_name","content_type","data64","requestOTP","mobile_number","save_info","verifyOTPBPB","verifyOTPBPBwithDispatch","CHECK_OTP","CHECK_OTP_SUCCESS","CHECK_OTPTM_SUCCESS","CHECK_OTP_ERROR","verifyOTP","createBankAccountOTP","mobileNumber","checkStatus"],"mappings":"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","sourcesContent":["import { Alert } from \"react-native\";\nimport * as NavigationService from \"../navigation/NavigationService\";\nimport { Toast } from \"native-base\";\nimport axios from \"axios\";\nimport { postMethod, postOnly, getDataOnly, alertBox } from \"./axiosCalls\";\nimport {\n  accountLink,\n  accountLinkError,\n  accountLinkInitialize,\n  accountLinkSuccess,\n} from \"../redux/account/actions\";\nimport * as Profile from \"store/profile\";\nimport * as TYPE from \"./types\";\n\n// Helpers\nimport {\n  dispatcher,\n  optionsDispatch,\n  APIErrorLogging,\n} from \"../library/helpers\";\n\n/*******************************\n *\n * Tokens\n *\n *******************************/\n\nconst getTokenByRefreshToken = (refreshToken) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"refresh_token\",\n      refresh_token: refreshToken,\n    },\n  };\n};\n\n/*******************************\n *\n * Authentication\n *\n *******************************/\n\nconst login = (username, password) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"signin\",\n      username: username,\n      password: password,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.LOGIN,\n    });\n    return postOnly(json_data)\n      .then((response) => {\n        if (response.data.success) {\n          dispatch({\n            type: TYPE.LOGIN_SUCCESS,\n            payload: response.data,\n          });\n          dispatch({\n            type: TYPE.STORE_TOKENS,\n            payload: {\n              tokens: {\n                access_token: response.data.access_token,\n                id_token: response.data.id_token,\n                refresh_token: response.data.refresh_token,\n              },\n              expires_in: response.data.expires_in,\n            },\n          });\n        } else {\n          dispatch({\n            type: TYPE.LOGIN_ERROR,\n            payload: response.data,\n          });\n          alertBox(response.data.message);\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"login\", error);\n        dispatch({\n          type: TYPE.LOGIN_ERROR,\n          payload: error,\n        });\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\nconst loginByFingerprint = (refreshToken) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"refresh_token\",\n      refresh_token: refreshToken,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.LOGIN,\n    });\n    return postOnly(json_data)\n      .then((response) => {\n        if (response.data.success) {\n          dispatch({\n            type: TYPE.LOGIN_SUCCESS,\n            payload: response.data,\n          });\n          dispatch({\n            type: TYPE.STORE_TOKENS,\n            payload: {\n              tokens: {\n                access_token: response.data.access_token,\n                id_token: response.data.id_token,\n                refresh_token: response.data.refresh_token,\n              },\n              expires_in: response.data.expires_in,\n            },\n          });\n        } else {\n          dispatch({\n            type: TYPE.LOGIN_ERROR,\n            payload: response.data,\n          });\n          alertBox(response.data.message);\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"loginByFingerprint\", error);\n        dispatch({\n          type: TYPE.LOGIN_ERROR,\n          payload: error,\n        });\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\nconst forgotPassword = (username) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"forgotpassword\",\n      user: username,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.FORGOT_PASSWORD,\n    });\n    return postOnly(json_data)\n      .then((response) => {\n        if (response.data.success) {\n          dispatch({\n            type: TYPE.FORGOT_PASSWORD_SUCCESS,\n            payload: {\n              is_fetching: false,\n              success: true,\n              message: response.data.message,\n            },\n          });\n          alertBox(response.data.message);\n          NavigationService.navigate(\"Login\");\n        } else {\n          dispatch({\n            type: TYPE.FORGOT_PASSWORD_ERROR,\n            payload: {\n              is_fetching: false,\n              sucess: false,\n              message: response.data.message,\n            },\n          });\n          alertBox(response.data.message);\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"forgotPassword\", error);\n        dispatch({\n          type: TYPE.FORGOT_PASSWORD_ERROR,\n\n          payload: {\n            is_fetching: false,\n            message: error,\n          },\n        });\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\nconst updateUserInformation = ({\n  id,\n  emails,\n  phoneNumbers,\n  userName,\n  password,\n  name,\n}) => {\n  let json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"updateUserByID\",\n      user_data: {\n        id,\n        active: true,\n        emails,\n        phoneNumbers,\n        userName,\n        password: password ? password : null,\n        name,\n      },\n    },\n  };\n\n  Object.keys(json_data.body.user_data).forEach(\n    (key) =>\n      json_data.body.user_data[key] == null &&\n      delete json_data.body.user_data[key]\n  );\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.UPDATE_PROFILE,\n    });\n    return postOnly(json_data)\n      .then((response) => {\n        if (response.data.success) {\n          dispatch({\n            type: TYPE.UPDATE_PROFILE_SUCCESS,\n            payload: response.data,\n          });\n        } else {\n          dispatch({\n            type: TYPE.UPDATE_PROFILE_ERROR,\n            payload: { message: \"\" },\n          });\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"updateUserInformation\", error);\n        dispatch({\n          type: TYPE.UPDATE_PROFILE_ERROR,\n          payload: { message: error },\n        });\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\nconst checkEmail = (userId) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    reducer_type: TYPE.CHECK_EMAIL,\n    params: {\n      action: \"isEmailVerified\",\n      userid: userId,\n    },\n  };\n\n  // return dispatch => {\n  //   dispatch()\n  // }\n  return postMethod(json_data);\n};\n\n// TO BE REFACTORED\n// Can reuse the API for signup\n\nconst resend_email = (userId) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"resendUserVerification\",\n      userid: userId,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.RESEND_EMAIL,\n    });\n    return postOnly(json_data)\n      .then((response) => {\n        if (response.data.success) {\n          dispatch({\n            type: TYPE.RESEND_EMAIL_SUCCESS,\n            payload: response.data,\n          });\n          alertBox(\n            \"Email Verification successfully resent. Please check your email.\"\n          );\n        } else {\n          const error = JSON.parse(response.data.log_error);\n          alertBox(error.detail);\n          dispatch({\n            type: TYPE.RESEND_EMAIL_ERROR,\n            payload: response.data,\n          });\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"resend_email\", error);\n        dispatch({\n          type: TYPE.RESEND_EMAIL_ERROR,\n          payload: error,\n        });\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\nconst signup = (userdata) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"signup\",\n      email: userdata.email,\n      password: userdata.password,\n      givenName: userdata.givenName,\n      middleName: userdata.middleName,\n      familyName: userdata.familyName,\n      phoneNumber: userdata.phoneNumber,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.SIGNUP,\n    });\n    return postOnly(json_data)\n      .then((response) => {\n        if (response.data.success) {\n          dispatch({\n            type: TYPE.SIGNUP_SUCCESS,\n            payload: response.data,\n          });\n          Profile.setSignUpData(response.data);\n          NavigationService.navigate(\"EmailVerification\");\n          // NavigationService.navigate(\"CreateMobileAccount2\");\n        } else {\n          const error = JSON.parse(response.data.log_error);\n          alertBox(error.detail);\n          dispatch({\n            type: TYPE.SIGNUP_ERROR,\n            payload: response.data,\n          });\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"signup\", error);\n        dispatch({\n          type: TYPE.SIGNUP_ERROR,\n          payload: error,\n        });\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\n// Accounts\n\nconst checkAccount = ({\n  first_name,\n  middle_name,\n  last_name,\n  date_of_birth,\n}) => {\n  const json_data = {\n    path: \"byteperbyte/CISCheck\",\n    params: {\n      first_name,\n      middle_name,\n      last_name,\n      date_of_birth,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.REQUEST_OTP,\n    });\n\n    // const test = () => {\n    //   dispatch({\n    //     type: TYPE.REQUEST_OTP_SUCCESS,\n    //     payload: {\n    //       token: \"3489903\",\n    //     },\n    //   });\n    //   NavigationService.navigate(\"LinkAccountOTP\");\n    // };\n\n    // const testingInterval = setInterval(() => {\n    //   test();\n    //   // otp = 5064726:\n    //   clearInterval(testingInterval);\n    // }, 2000);\n\n    // return;\n\n    return getDataOnly(json_data)\n      .then((response) => {\n        const response_data = response.data.data[\"Register.Info\"];\n        const has_data = !response_data.ErrorMsg;\n        if (has_data) {\n          dispatch({\n            type: TYPE.REQUEST_OTP_SUCCESS,\n            payload: {\n              token: response_data.token,\n            },\n          });\n\n          NavigationService.navigate(\"LinkAccountOTP\");\n        } else {\n          dispatch({\n            type: TYPE.REQUEST_OTP_ERROR,\n            payload: {\n              message: response_data.ErrorMsg,\n            },\n          });\n          alertBox(response_data.ErrorMsg);\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"checkAccount\", error);\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n        dispatch({\n          type: REQUEST_OTP_ERROR,\n          payload: {\n            isFetching: false,\n            success: false,\n            message: response_data.ErrorMsg,\n            token: \"\",\n          },\n        });\n      });\n  };\n};\n\nconst getAccounts = (cisno) => {\n  const json_data = {\n    path: \"byteperbyte/CISAccountInquiry\",\n    params: {\n      cisno: cisno,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.FETCH_ACCOUNTS,\n    });\n    return getDataOnly(json_data)\n      .then((response) => {\n        if (response.data.status == \"ok\") {\n          let accountList = {\n            LN: {\n              title: \"Loan Accounts\",\n              accounts: {},\n              accountsById: [],\n            },\n            TD: {\n              title: \"Time Deposit\",\n              accounts: {},\n              accountsById: [],\n            },\n            SA: {\n              title: \"Savings Account\",\n              accounts: {},\n              accountsById: [],\n            },\n          };\n\n          const { data: output } = response;\n          if (output.data[\"Account.Info\"].accts) {\n            const accounts = output.data[\"Account.Info\"].accts.a;\n\n            if (accounts instanceof Array) {\n              accounts.map((account, index) => {\n                if (accountList[account.accttype]) {\n                  accountList[account.accttype].accounts[\n                    account.AcctNoFormatted\n                  ] = {\n                    key: index,\n                    title: account.Name1,\n                    acctno: account.AcctNoFormatted,\n                    balance: `PHP ${account.LedgerFormatted}`,\n                  };\n                  accountList[account.accttype].accountsById.push(\n                    account.AcctNoFormatted\n                  );\n                }\n              });\n            } else {\n              // Object\n              if (accountList[accounts.accttype]) {\n                accountList[accounts.accttype].accounts[\n                  accounts.AcctNoFormatted\n                ] = {\n                  key: 1,\n                  title: accounts.Name1,\n                  acctno: accounts.AcctNoFormatted,\n                  balance: `PHP ${accounts.LedgerFormatted}`,\n                };\n                accountList[accounts.accttype].accountsById.push(\n                  accounts.AcctNoFormatted\n                );\n              }\n            }\n          }\n\n          dispatch({\n            type: TYPE.FETCH_ACCOUNTS_SUCCESS,\n            payload: accountList,\n          });\n        } else {\n          dispatch({\n            type: TYPE.FETCH_ACCOUNTS_ERROR,\n            payload: {\n              is_fetching: false,\n              error: true,\n              list: [],\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"getAccounts\", error);\n        dispatch({\n          type: TYPE.FETCH_ACCOUNTS_ERROR,\n          payload: {\n            is_fetching: false,\n            error: true,\n            list: [],\n          },\n        });\n        throw error;\n      });\n  };\n};\n\nconst getAccountHistory = (acctno, count) => {\n  const json_data = {\n    path: \"byteperbyte/AccountInquiryHistory\",\n    params: {\n      acctno,\n      count,\n    },\n  };\n\n  return getDataOnly(json_data);\n};\n\nconst getAccountInfo = (acctno) => {\n  const json_data = {\n    path: \"byteperbyte/AccountsInfo\",\n    params: {\n      acctno,\n    },\n  };\n\n  return getDataOnly(json_data);\n};\n\nconst getAccountDetails = (acctno, count) => {\n  let accountDetails = {\n    id: acctno, // Account Number\n    balance: {\n      raw: \"\", // Available Balance\n      formatted: \"\", // Available Balance (Formatted)\n    },\n    currency: \"\", // Currency Code\n    history: [], // History\n    name: \"\", // Full Name (Name1)\n    product: \"\", // Product\n    status: {\n      type: \"\", // Status\n      code: \"\", // Status Number\n    },\n    type: {\n      raw: \"\", // Account Type\n      formatted: \"\", // Account Type (Formatted)\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.FETCH_ACCOUNTDETAILS,\n    });\n\n    axios\n      .all([getAccountInfo(acctno), getAccountHistory(acctno, count)])\n      .then(\n        axios.spread((info, history) => {\n          if (info.data.data[\"Account.Info\"].ErrorMsg !== \"\") {\n            alertBox(\n              \"Ooops! There's something wrong connecting to the server. Please try again.\"\n            );\n\n            NavigationService.navigate(\"Dashboard\");\n            dispatch({\n              type: TYPE.FETCH_ACCOUNTINFO_ERROR,\n            });\n            return;\n          }\n\n          if (history.data.data[\"Account.Info\"].ErrorMsg !== \"\") {\n            alertBox(\n              \"Ooops! There's something wrong connecting to the server. Please try again.\"\n            );\n\n            NavigationService.navigate(\"Dashboard\");\n            dispatch({\n              type: TYPE.FETCH_ACCOUNTSHISTORY_ERROR,\n            });\n            return;\n          }\n\n          const {\n            AccountStatus,\n            AccountStatusNo,\n            // AcctNo,\n            // AcctNoFormatted,\n            AcctType,\n            AcctTypeFormatted,\n            Available,\n            AvailableFormatted,\n            CurrencyCode,\n            // ErrorMsg,\n            // ErrorMsg2,\n            // Float,\n            // FloatFormatted,\n            // Hold,\n            // HoldFormatted,\n            // Ledger,\n            // LedgerFormatter,\n            Name1,\n            // Name2,\n            Product,\n            // ReturnCode,\n            // SourceofTransfer,\n            // cs,\n            // its,\n            // sls,\n            // tds\n          } = info.data.data[\"Account.Info\"];\n\n          accountDetails.balance = {\n            raw: Available ? Available : \"\",\n            formatted: AvailableFormatted ? AvailableFormatted : \"\",\n          };\n          accountDetails.type = {\n            raw: AcctType ? AvailableFormatted : \"\",\n            formatted: AcctTypeFormatted ? AcctTypeFormatted : \"\",\n          };\n          accountDetails.status = {\n            type: AccountStatus ? AccountStatus : \"\",\n            code: AccountStatusNo ? AccountStatusNo : \"\",\n          };\n          accountDetails.currency = CurrencyCode ? CurrencyCode : \"\";\n\n          if (\n            history.data.data[\"Account.Info\"].tis !== null &&\n            history.data.data[\"Account.Info\"].tis.ti instanceof Array\n          ) {\n            accountDetails.history = history.data.data[\n              \"Account.Info\"\n            ].tis.ti.map((history, index) => {\n              return {\n                id: index.toString(),\n                title: history.tn,\n                date: history.td,\n                amount: history.dr\n                  ? parseInt(history.dr)\n                  : -Math.abs(parseInt(history.cr)),\n              };\n            });\n          }\n\n          accountDetails.name = Name1 ? Name1 : \"\";\n          accountDetails.product = Product ? Product : \"\";\n\n          dispatch({\n            type: TYPE.FETCH_ACCOUNTDETAILS_SUCCESS,\n            payload: {\n              account: {\n                [acctno]: accountDetails,\n              },\n            },\n          });\n        })\n      )\n      .catch((error) => {\n        APIErrorLogging(\"getAccountDetails\", error);\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n\n        NavigationService.navigate(\"Dashboard\");\n        dispatch({\n          type: TYPE.FETCH_ACCOUNTDETAILS_ERROR,\n        });\n      });\n  };\n};\n\nconst createBankAccount = (accountData) => {\n  const json_data = {\n    path: \"sunsavings/SSCreateAccountRequest\",\n    body: accountData,\n  };\n\n  return postOnly(json_data);\n};\n\nconst addBankAccount = ({ id, accountData, access_token }) => {\n  return (dispatch) => {\n    return putAttributes({\n      name: id,\n      value: accountData,\n      access_token,\n    })\n      .then(({ data: { data, status, msg } }) => {})\n      .catch((error) => {\n        APIErrorLogging(\"addBankAccount\", error);\n        dispatch({\n          type: TYPE.ADD_ACCOUNT_ERROR,\n        });\n      });\n  };\n};\n\nconst linkAccount = ({ cis_no, access_token }) => {\n  return putAttributes({\n    name: \"cis_no\",\n    value: cis_no,\n    access_token,\n  });\n};\n\nconst linkAccountWithDispatch = ({ cis_no, access_token }) => {\n  return (dispatch) => {\n    dispatch(accountLink());\n    return linkAccount({ cis_no, access_token })\n      .then(({ data }) => {\n        if (data.success == true) {\n          dispatch(accountLinkSuccess());\n        } else {\n          dispatch(accountLinkError(\"Error\"));\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"linkAccountWithDispatch\", error);\n        dispatch(accountLinkError(error));\n      });\n  };\n};\n\nconst createBankAccout = ({ uniqueId, attributes, access_token }) => {\n  return (\n    putAttributes({\n      name: uniqueId,\n      value: attributes,\n      access_token,\n    })\n      // .then(({data: {data, status, msg}}) => {\n      .then(({ data }) => {\n        if (data.status == \"error\") {\n        } else {\n          NavigationService.navigate(\"Dashboard\");\n          alertBox(\"Created Bank Account successfully!\");\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"createBankAccout\", error);\n      })\n  );\n};\n\nconst putAttributes = ({ name, value, access_token }) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"put_attribute_name\",\n      attribute_name: name,\n      attribute_value: value,\n      access_token: access_token,\n    },\n  };\n\n  return postOnly(json_data);\n};\n\n/*******************************\n *\n * CIS\n *\n *******************************/\n\nconst CISVerify = ({ token, otp }) => {\n  const json_data = {\n    path: \"byteperbyte/CISVerify\",\n    params: {\n      token,\n      otp,\n    },\n  };\n\n  return getDataOnly(json_data);\n};\n\n/*******************************\n *\n * Profile\n *\n *******************************/\n\nconst getProfile = ({ id }) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"getProfile\",\n      user_id: id,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.FETCH_PROFILE,\n    });\n    return postOnly(json_data)\n      .then((response) => {\n        if (response.data.success) {\n          const { attributes } = response.data;\n          const {\n            displayName,\n            emails,\n            id,\n            name: { givenName, middleName, familyName },\n            phoneNumbers,\n          } = response.data.identities[0].idpUserInfo;\n\n          dispatch({\n            type: TYPE.FETCH_PROFILE_SUCCESS,\n            payload: {\n              id,\n              attributes,\n              emails,\n              phoneNumbers,\n              name: {\n                displayName,\n                givenName,\n                middleName,\n                familyName,\n              },\n            },\n          });\n        } else {\n          dispatch({\n            type: TYPE.FETCH_PROFILE_ERROR,\n            payload: {\n              message: response.data.message.error,\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"getProfile\", error);\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\n// To be added\nconst saveProfile = ({\n  id,\n  attributes,\n  givenName,\n  middleName,\n  familyName,\n  emails,\n  phoneNumber,\n}) => {\n  const json_data = {\n    path: \"bf33cd0a-aa9c-4424-9253-bf0d82a101fd/manage\",\n    body: {\n      action: \"updateProfile\",\n      user_data: {\n        id,\n        emails,\n        phoneNumber,\n        given_name: givenName,\n        middle_name: middleName,\n        family_name: familyName,\n        attributes: attributes,\n      },\n    },\n  };\n\n  Object.keys(json_data.body.user_data).forEach(\n    (key) =>\n      json_data.body.user_data[key] == null &&\n      delete json_data.body.user_data[key]\n  );\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.UPDATE_PROFILE,\n    });\n    return postOnly(json_data)\n      .then(({ data }) => {\n        if (data.errorCode && data.errorCode !== \"\") {\n          dispatch({\n            type: TYPE.UPDATE_PROFILE_ERROR,\n            payload: {\n              message: data.message,\n            },\n          });\n        } else {\n          dispatch({\n            type: TYPE.UPDATE_PROFILE_SUCCESS,\n            payload: {\n              message: \"\",\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"saveProfile\", error);\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\n/*******************************\n *\n * Loan\n *\n *******************************/\n\n//  To be added\nconst loan = ({\n  user_id,\n  firstName,\n  middleName,\n  lastName,\n  birthDate,\n  amount,\n  perCutOff,\n  months,\n}) => {\n  const json_data = {\n    path: \"sunsavings/SSCreateLoanRequestMobile\",\n    body: {\n      user_id,\n      firstName,\n      middleName,\n      lastName,\n      birthDate,\n      amount,\n      perCutOff,\n      months,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.FETCH,\n    });\n    return postOnly(json_data)\n      .then((response) => {\n        let { data } = response;\n        if (data.status == \"ok\") {\n          Toast.show({\n            text: data.msg,\n            duration: 3000,\n            type: \"success\",\n          });\n          dispatch({\n            type: TYPE.FETCH_SUCCESS,\n            payload: {\n              message: data.msg,\n            },\n          });\n        } else {\n          Toast.show({\n            text: data.msg,\n            duration: 3000,\n            type: \"danger\",\n          });\n          dispatch({\n            type: TYPE.FETCH_ERROR,\n            payload: {\n              message: data.msg,\n            },\n          });\n        }\n        //\n      })\n      .catch((error) => {\n        APIErrorLogging(\"loan\", error);\n        // dispatch({\n        //   type: TYPE.LOAN_ERROR,\n        //   payload: {\n        //     is_fetching: false,\n        //     message: error\n        //   }\n        // });\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n  };\n};\n\n/*******************************\n *\n * Search\n *\n *******************************/\n\nconst searchByCity = (city) => {\n  const json_data = {\n    path: \"/byteperbyte/MISSearch\",\n    params: {\n      search: city,\n    },\n  };\n\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.SEARCH_CITY,\n    });\n\n    return getDataOnly(json_data)\n      .then((response) => {\n        dispatcher({\n          dispatch,\n          action: TYPE.SEARCH_CITY_SUCCESS,\n          payload: response.data.data,\n        });\n      })\n      .catch((error) => {\n        APIErrorLogging(\"searchByCity\", error);\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n        dispatcher({\n          dispatch,\n          action: TYPE.SEARCH_CITY_ERROR,\n          payload: {},\n        });\n      });\n  };\n};\n\n/*******************************\n *\n * Lists\n *\n *******************************/\n\nconst getList = (type, additionalParams) => {\n  const json_data = {\n    path: \"/byteperbyte//MISDropDown\",\n    params: {\n      type,\n      ...additionalParams,\n    },\n  };\n\n  return getDataOnly(json_data);\n};\n\nconst getBarangays = (city) => {\n  return (dispatch) => {\n    dispatcher({\n      dispatch,\n      action: TYPE.FETCH_BARANGAYS,\n    });\n    return getList(\"address\", { city_code: city })\n      .then(({ data }) => {\n        if (data.status == \"ok\" && data.data instanceof Array) {\n          const { data: lists } = data;\n          let payload = {\n            data: {},\n            listsById: [],\n          };\n\n          lists.map((item) => {\n            payload.data[item.id_code] = {\n              label: item.description,\n              value: item.path,\n            };\n            payload.listsById.push(item.id_code);\n          });\n          dispatcher({\n            dispatch,\n            action: TYPE.FETCH_BARANGAYS_SUCCESS,\n            payload: payload,\n          });\n        } else {\n          dispatcher({\n            dispatch,\n            action: TYPE.FETCH_BARANGAYS_ERROR,\n          });\n        }\n      })\n      .catch((error) => {\n        APIErrorLogging(\"getBarangays\", error);\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n        dispatcher({\n          dispatch,\n          action: TYPE.FETCH_BARANGAYS_ERROR,\n        });\n      });\n  };\n};\n\nconst getLists = () => {\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.FETCH_LISTS,\n    });\n    axios\n      .all([\n        getList(\"civil_status\"),\n        getList(\"home_ownership\"),\n        getList(\"id_list\"),\n        getList(\"job_title\"),\n        getList(\"nationality\"),\n        getList(\"source_of_fund\"),\n      ])\n      .then(\n        axios.spread(\n          (\n            civilStatus,\n            homeOwnership,\n            idList,\n            jobTitle,\n            nationality,\n            sourceOfFund\n          ) => {\n            // Civil Status\n            optionsDispatch({\n              data: civilStatus.data,\n              type: \"CIVILSTATUS\",\n              dispatch,\n            });\n\n            // Home Ownership\n            optionsDispatch({\n              data: homeOwnership.data,\n              type: \"HOMEOWNERSHIP\",\n              dispatch,\n            });\n\n            // ID List\n            optionsDispatch({\n              data: idList.data,\n              type: \"IDTYPE\",\n              dispatch,\n            });\n\n            // Job Title\n            optionsDispatch({\n              data: jobTitle.data,\n              type: \"JOBTITLE\",\n              dispatch,\n            });\n\n            // Nationality\n            optionsDispatch({\n              data: nationality.data,\n              type: \"NATIONALITY\",\n              dispatch,\n            });\n\n            // Source of Fund\n            optionsDispatch({\n              data: sourceOfFund.data,\n              type: \"FUNDSOURCE\",\n              dispatch,\n            });\n\n            dispatch({\n              type: TYPE.FETCH_LISTS_SUCCESS,\n            });\n          }\n        )\n      )\n      .catch((error) => {\n        APIErrorLogging(\"getLists\", error);\n        alertBox(\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n        dispatch({\n          type: TYPE.FETCH_LISTS_ERROR,\n        });\n      });\n  };\n};\n\nconst uploadIDs = (id1, id2) => {\n  return axios\n    .all([\n      upload({\n        file_name: \"id1.png\",\n        content_type: \"image\",\n        data64: id1,\n      }),\n      upload({\n        file_name: \"id2.png\",\n        content_type: \"image\",\n        data64: id2,\n      }),\n    ]);\n};\n\n// Uploader\nconst upload = ({ file_name, content_type, data64 }) => {\n  const json_data = {\n    path: \"sunsavings/SSFileUpload\",\n    body: {\n      file_name: file_name,\n      content_type: content_type,\n      data64: data64,\n    },\n  };\n\n  return postOnly(json_data);\n};\n\n/*******************************\n *\n * OTP\n *\n *******************************/\n\nconst requestOTP = ({ mobile_number, email, save_info }) => {\n  const json_data = {\n    // path: \"tm/otp\",\n    path: \"tm/otp_sunsavings\",\n    body: {\n      mobile_number,\n      email,\n      save_info,\n    },\n  };\n\n  Object.keys(json_data.body).forEach(\n    (key) => json_data.body[key] == null && delete json_data.body[key]\n  );\n\n  return postOnly(json_data);\n};\n\nconst verifyOTPBPB = ({ token, otp }) => {\n  const json_data = {\n    path: \"byteperbyte/CISVerify\",\n    params: {\n      token,\n      otp,\n    },\n  };\n\n  return getDataOnly(json_data);\n};\n\nconst verifyOTPBPBwithDispatch = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: TYPE.CHECK_OTP,\n    });\n\n    return verifyOTPBPB(payload)\n      .then(({ data: { data } }) => {\n        if (data[\"Register.Info\"].cis_no) {\n          dispatch({\n            type: TYPE.CHECK_OTP_SUCCESS,\n            payload: {\n              id: data[\"Register.Info\"].cis_no, //CIS id\n            },\n          });\n          dispatch({\n            type: TYPE.CHECK_OTPTM_SUCCESS,\n          });\n        } else {\n          dispatch({\n            type: TYPE.CHECK_OTP_ERROR,\n            payload: {\n              message: data[\"Register.Info\"].ErrorMsg,\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({\n          type: TYPE.CHECK_OTP_ERROR,\n          payload: {\n            message: error,\n          },\n        });\n      });\n  };\n};\n\nconst verifyOTP = ({ token, otp }) => {\n  const json_data = {\n    path: \"tm/otp_verify\",\n    body: {\n      token: token + otp,\n    },\n  };\n\n  return postOnly(json_data);\n};\n\nconst createBankAccountOTP = ({ mobileNumber, data }) => {\n  return (dispatch) => {\n    requestOTP({\n      mobile_number: mobileNumber,\n      save_info: data,\n    })\n      .then((response) => {})\n      .catch((error) => {});\n  };\n};\n\nconst checkStatus = (response) => {\n  return response.data.status == \"ok\";\n};\n\nexport default {\n  login,\n  loginByFingerprint,\n  forgotPassword,\n  updateUserInformation,\n  checkEmail,\n  resend_email,\n  signup,\n  checkAccount,\n  getAccounts,\n  getAccountHistory,\n  getAccountInfo,\n  getAccountDetails,\n  createBankAccount,\n  addBankAccount,\n  CISVerify,\n  linkAccount,\n  linkAccountWithDispatch,\n  createBankAccout,\n  getProfile,\n  saveProfile,\n  loan,\n  getList,\n  getLists,\n  getBarangays,\n  searchByCity,\n  upload,\n  uploadIDs,\n  requestOTP,\n  verifyOTP,\n  verifyOTPBPB,\n  verifyOTPBPBwithDispatch,\n};\n"]},"metadata":{},"sourceType":"module"}