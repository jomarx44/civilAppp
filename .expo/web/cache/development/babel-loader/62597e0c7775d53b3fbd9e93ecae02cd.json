{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { BANK_ACCOUNT_CREATE, BANK_ACCOUNT_CREATE_ERROR, BANK_ACCOUNT_CREATE_INITIALIZE, BANK_ACCOUNT_CREATE_SUCCESS, BANK_ACCOUNT_FETCH, BANK_ACCOUNT_FETCH_ERROR, BANK_ACCOUNT_FETCH_INITIALIZE, BANK_ACCOUNT_FETCH_SUCCESS, BANK_ACCOUNT_HISTORY_FETCH, BANK_ACCOUNT_HISTORY_FETCH_ERROR, BANK_ACCOUNT_HISTORY_FETCH_INITIALIZE, BANK_ACCOUNT_HISTORY_FETCH_SUCCESS, BANK_ACCOUNT_INITIALIZE_REDUCER } from \"../actions\";\nimport { bankAccount } from \"../../API\";\nexport var bankAccountInitializeReducer = function bankAccountInitializeReducer() {\n  return {\n    type: BANK_ACCOUNT_INITIALIZE_REDUCER\n  };\n};\nexport var bankAccountInitializeCreate = function bankAccountInitializeCreate() {\n  return {\n    type: BANK_ACCOUNT_CREATE_INITIALIZE\n  };\n};\nexport var createBankAccount = function createBankAccount(account) {\n  return {\n    type: BANK_ACCOUNT_CREATE,\n    payload: {\n      account: account\n    }\n  };\n};\nexport var createBankAccountSuccess = function createBankAccountSuccess() {\n  return {\n    type: BANK_ACCOUNT_CREATE_SUCCESS\n  };\n};\nexport var createBankAccountError = function createBankAccountError(error) {\n  return {\n    type: BANK_ACCOUNT_CREATE_ERROR,\n    error: error\n  };\n};\nexport var bankAccountInitializeFetch = function bankAccountInitializeFetch() {\n  return {\n    type: BANK_ACCOUNT_FETCH_INITIALIZE\n  };\n};\nexport var getBankAccount = function getBankAccount() {\n  return {\n    type: BANK_ACCOUNT_FETCH\n  };\n};\nexport var getBankAccountSuccess = function getBankAccountSuccess(accounts, accountsById) {\n  return {\n    type: BANK_ACCOUNT_FETCH_SUCCESS,\n    payload: {\n      list: accounts,\n      listByIds: accountsById\n    }\n  };\n};\nexport var getBankAccountError = function getBankAccountError(error) {\n  return {\n    type: BANK_ACCOUNT_FETCH_ERROR,\n    error: error\n  };\n};\nexport var getBankAccountHistory = function getBankAccountHistory() {\n  return {\n    type: BANK_ACCOUNT_HISTORY_FETCH\n  };\n};\nexport var getBankAccountHistorySuccess = function getBankAccountHistorySuccess(historyList) {\n  return {\n    type: BANK_ACCOUNT_HISTORY_FETCH_SUCCESS,\n    payload: {\n      historyList: historyList\n    }\n  };\n};\nexport var getBankAccountHistoryError = function getBankAccountHistoryError(error) {\n  return {\n    type: BANK_ACCOUNT_HISTORY_FETCH_ERROR,\n    error: error\n  };\n};\n\nvar reformatAccount = function reformatAccount(account) {\n  return {\n    accountNumber: account.acctno,\n    accountNumberFormatted: account.AcctNoFormatted,\n    accountLedger: account.Ledger,\n    accountLedgerFormatted: account.LedgerFormatted,\n    accountAmountCent: account.amt_cent,\n    accountAmountWhole: account.amt_whole,\n    accountMainName: account.acctname,\n    accountName: account.Name1,\n    accountOtherName: account.Name2,\n    accountDesription: account.acctdesc,\n    accountType: account.accttype,\n    accountCurrencyCode: account.CurrencyCode,\n    FTRSource: account.FTRSrc,\n    ATM: account.atm\n  };\n};\n\nexport var getBankAccountsAsync = function getBankAccountsAsync(CISNumber) {\n  console.log(\"Went Here???\");\n  return function (dispatch) {\n    dispatch(getBankAccount());\n    return bankAccount.get(CISNumber).then(function (_ref) {\n      var _ref$data = _ref.data,\n          data = _ref$data.data,\n          msg = _ref$data.msg,\n          status = _ref$data.status;\n      var _data$AccountInfo = data[\"Account.Info\"],\n          accounts = _data$AccountInfo.accts.a,\n          errorMessage = _data$AccountInfo.ErrorMsg,\n          returnCode = _data$AccountInfo.ReturnCode;\n      console.log(\"errorMessage: \", errorMessage);\n\n      if (errorMessage == \"\") {\n        var list = {};\n        var listByIds = [];\n\n        if (Array.isArray(accounts)) {\n          accounts.map(function (account, index) {\n            list = _objectSpread(_objectSpread({}, list), {}, _defineProperty({}, account.AcctNoFormatted, reformatAccount(account)));\n            listByIds = [].concat(_toConsumableArray(listByIds), [account.AcctNoFormatted]);\n          });\n        } else if (accounts instanceof Object) {\n          list = _objectSpread(_objectSpread({}, list), {}, _defineProperty({}, accounts.AcctNoFormatted, reformatAccount(accounts)));\n          listByIds = [].concat(_toConsumableArray(listByIds), [accounts.AcctNoFormatted]);\n        }\n\n        dispatch(getBankAccountSuccess(list, listByIds));\n      } else {\n        dispatch(getBankAccountError(new Error(errorMessage)));\n      }\n    }).catch(function (error) {\n      console.log(\"Error: \", error);\n      dispatch(getBankAccountError(error));\n    });\n  };\n};\nexport var getBankAccountHistoryAsync = function getBankAccountHistoryAsync(accountNumber) {\n  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  return function (dispatch) {\n    dispatch(getBankAccountHistory());\n    return bankAccount.getHistory(accountNumber, count).then(function (_ref2) {\n      var data = _ref2.data.data;\n      var _data$AccountInfo2 = data[\"Account.Info\"],\n          accountNumberFormatted = _data$AccountInfo2.AcctNoFormatted,\n          errorMessage = _data$AccountInfo2.ErrorMsg,\n          errorMessage2 = _data$AccountInfo2.ErrorMsg2,\n          returnCode = _data$AccountInfo2.ReturnCode,\n          historyList = _data$AccountInfo2.tis.ti;\n\n      if (returnCode == 0) {\n        if (historyList instanceof Array) {\n          var formattedHistoryList = historyList.map(function (history, index) {\n            return {\n              id: index.toString(),\n              title: history.tn,\n              date: history.td,\n              amount: history.dr ? parseInt(history.dr.replace(\",\", \"\")) : -Math.abs(parseInt(history.cr.replace(\",\", \"\")))\n            };\n          });\n          dispatch(getBankAccountHistorySuccess(_defineProperty({}, accountNumberFormatted, formattedHistoryList)));\n        }\n      } else {\n        getBankAccountHistoryError(new Error(errorMessage));\n      }\n    }).catch(function (error) {\n      dispatch(getBankAccountHistoryError(error));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/redux/bankAccount/actions.js"],"names":["BANK_ACCOUNT_CREATE","BANK_ACCOUNT_CREATE_ERROR","BANK_ACCOUNT_CREATE_INITIALIZE","BANK_ACCOUNT_CREATE_SUCCESS","BANK_ACCOUNT_FETCH","BANK_ACCOUNT_FETCH_ERROR","BANK_ACCOUNT_FETCH_INITIALIZE","BANK_ACCOUNT_FETCH_SUCCESS","BANK_ACCOUNT_HISTORY_FETCH","BANK_ACCOUNT_HISTORY_FETCH_ERROR","BANK_ACCOUNT_HISTORY_FETCH_INITIALIZE","BANK_ACCOUNT_HISTORY_FETCH_SUCCESS","BANK_ACCOUNT_INITIALIZE_REDUCER","bankAccount","bankAccountInitializeReducer","type","bankAccountInitializeCreate","createBankAccount","account","payload","createBankAccountSuccess","createBankAccountError","error","bankAccountInitializeFetch","getBankAccount","getBankAccountSuccess","accounts","accountsById","list","listByIds","getBankAccountError","getBankAccountHistory","getBankAccountHistorySuccess","historyList","getBankAccountHistoryError","reformatAccount","accountNumber","acctno","accountNumberFormatted","AcctNoFormatted","accountLedger","Ledger","accountLedgerFormatted","LedgerFormatted","accountAmountCent","amt_cent","accountAmountWhole","amt_whole","accountMainName","acctname","accountName","Name1","accountOtherName","Name2","accountDesription","acctdesc","accountType","accttype","accountCurrencyCode","CurrencyCode","FTRSource","FTRSrc","ATM","atm","getBankAccountsAsync","CISNumber","console","log","dispatch","get","then","data","msg","status","accts","a","errorMessage","ErrorMsg","returnCode","ReturnCode","Array","isArray","map","index","Object","Error","catch","getBankAccountHistoryAsync","count","getHistory","errorMessage2","ErrorMsg2","tis","ti","formattedHistoryList","history","id","toString","title","tn","date","td","amount","dr","parseInt","replace","Math","abs","cr"],"mappings":"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","sourcesContent":["import {\n  BANK_ACCOUNT_CREATE,\n  BANK_ACCOUNT_CREATE_ERROR,\n  BANK_ACCOUNT_CREATE_INITIALIZE,\n  BANK_ACCOUNT_CREATE_SUCCESS,\n  BANK_ACCOUNT_FETCH,\n  BANK_ACCOUNT_FETCH_ERROR,\n  BANK_ACCOUNT_FETCH_INITIALIZE,\n  BANK_ACCOUNT_FETCH_SUCCESS,\n  BANK_ACCOUNT_HISTORY_FETCH,\n  BANK_ACCOUNT_HISTORY_FETCH_ERROR,\n  BANK_ACCOUNT_HISTORY_FETCH_INITIALIZE,\n  BANK_ACCOUNT_HISTORY_FETCH_SUCCESS,\n  BANK_ACCOUNT_INITIALIZE_REDUCER,\n} from \"../actions\";\n\nimport { bankAccount } from \"../../API\";\n\n/***********************\n * ACTION CREATORS\n ***********************/\n\n// Initialize Bank Account Reducer\nexport const bankAccountInitializeReducer = () => ({\n  type: BANK_ACCOUNT_INITIALIZE_REDUCER,\n});\n\n// Initialize Create Bank Account\nexport const bankAccountInitializeCreate = () => ({\n  type: BANK_ACCOUNT_CREATE_INITIALIZE,\n});\n\n// Create Bank Account\nexport const createBankAccount = (account) => ({\n  type: BANK_ACCOUNT_CREATE,\n  payload: {\n    account,\n  },\n});\n\n// Create Bank Account Success\nexport const createBankAccountSuccess = () => ({\n  type: BANK_ACCOUNT_CREATE_SUCCESS,\n});\n\n// Create Bank Account Error\nexport const createBankAccountError = (error) => ({\n  type: BANK_ACCOUNT_CREATE_ERROR,\n  error,\n});\n\n// Initialize Fetch Bank Account\nexport const bankAccountInitializeFetch = () => ({\n  type: BANK_ACCOUNT_FETCH_INITIALIZE,\n});\n\n// Fetch Bank Account\nexport const getBankAccount = () => {\n  return {\n    type: BANK_ACCOUNT_FETCH,\n  };\n};\n\n// Fetch Bank Account Success\nexport const getBankAccountSuccess = (accounts, accountsById) => ({\n  type: BANK_ACCOUNT_FETCH_SUCCESS,\n  payload: {\n    list: accounts,\n    listByIds: accountsById,\n  },\n});\n\n// Fetch Bank Account Error\nexport const getBankAccountError = (error) => ({\n  type: BANK_ACCOUNT_FETCH_ERROR,\n  error,\n});\n\n// Fetch Bank Account\nexport const getBankAccountHistory = () => {\n  return {\n    type: BANK_ACCOUNT_HISTORY_FETCH,\n  };\n};\n\n// Fetch Bank Account Success\nexport const getBankAccountHistorySuccess = (historyList) => ({\n  type: BANK_ACCOUNT_HISTORY_FETCH_SUCCESS,\n  payload: {\n    historyList,\n  },\n});\n\n// Fetch Bank Account Error\nexport const getBankAccountHistoryError = (error) => ({\n  type: BANK_ACCOUNT_HISTORY_FETCH_ERROR,\n  error,\n});\n\n/***********************\n * API WITH DISPATCH\n ***********************/\n\nconst reformatAccount = (account) => {\n  return {\n    accountNumber: account.acctno,\n    accountNumberFormatted: account.AcctNoFormatted,\n    accountLedger: account.Ledger,\n    accountLedgerFormatted: account.LedgerFormatted,\n    accountAmountCent: account.amt_cent,\n    accountAmountWhole: account.amt_whole,\n    accountMainName: account.acctname,\n    accountName: account.Name1,\n    accountOtherName: account.Name2,\n    accountDesription: account.acctdesc,\n    accountType: account.accttype,\n    accountCurrencyCode: account.CurrencyCode,\n    FTRSource: account.FTRSrc,\n    ATM: account.atm,\n  };\n};\n\n/**\n * @description Used for fetching Bank Accounts\n * @param {String} CISNumber\n */\nexport const getBankAccountsAsync = (CISNumber) => {\n  console.log(\"Went Here???\");\n  return (dispatch) => {\n    dispatch(getBankAccount());\n    return bankAccount\n      .get(CISNumber)\n      .then(({ data: { data, msg, status } }) => {\n        const {\n          accts: { a: accounts },\n          ErrorMsg: errorMessage,\n          ReturnCode: returnCode,\n        } = data[\"Account.Info\"];\n        console.log(\"errorMessage: \", errorMessage);\n\n        if (errorMessage == \"\") {\n          let list = {};\n          let listByIds = [];\n\n          if (Array.isArray(accounts)) {\n            accounts.map((account, index) => {\n              list = {\n                ...list,\n                [account.AcctNoFormatted]: reformatAccount(account),\n              };\n              listByIds = [...listByIds, account.AcctNoFormatted];\n            });\n          } else if (accounts instanceof Object) {\n            list = {\n              ...list,\n              [accounts.AcctNoFormatted]: reformatAccount(accounts),\n            };\n            listByIds = [...listByIds, accounts.AcctNoFormatted];\n          }\n\n          dispatch(getBankAccountSuccess(list, listByIds));\n        } else {\n          dispatch(getBankAccountError(new Error(errorMessage)));\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error: \", error);\n        dispatch(getBankAccountError(error));\n      });\n  };\n};\n\n/**\n * Get Bank Account History Async\n * @param {String} accountNumber Bank Account Number or Bank Formatted Account Number\n * @param {String} count Maximum count of total history to be returned\n */\nexport const getBankAccountHistoryAsync = (accountNumber, count = 10) => {\n  return (dispatch) => {\n    dispatch(getBankAccountHistory());\n    return bankAccount\n      .getHistory(accountNumber, count)\n      .then(({ data: { data } }) => {\n        const {\n          AcctNoFormatted: accountNumberFormatted,\n          ErrorMsg: errorMessage,\n          ErrorMsg2: errorMessage2,\n          ReturnCode: returnCode,\n          tis: { ti: historyList },\n        } = data[\"Account.Info\"];\n\n        if (returnCode == 0) {\n          if (historyList instanceof Array) {\n            let formattedHistoryList = historyList.map((history, index) => {\n              return {\n                id: index.toString(),\n                title: history.tn,\n                date: history.td,\n                amount: history.dr\n                  ? parseInt(history.dr.replace(\",\", \"\"))\n                  : -Math.abs(parseInt(history.cr.replace(\",\", \"\"))),\n              };\n            });\n\n            dispatch(\n              getBankAccountHistorySuccess({\n                [accountNumberFormatted]: formattedHistoryList,\n              })\n            );\n          }\n        } else {\n          getBankAccountHistoryError(new Error(errorMessage));\n        }\n      })\n      .catch((error) => {\n        dispatch(getBankAccountHistoryError(error));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}