{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/components/FingerprintModal/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport Modal from \"react-native-modal\";\nimport { ContainedButton } from \"../Buttons\";\nimport { authenticateAsync, cancelAuthenticate } from \"expo-local-authentication\";\nimport { styles } from \"./styles\";\nimport { icons } from \"../../res/images/icons\";\nimport { AUTHENTICATION_FAILED, TOO_FAST } from \"../../constants/error\";\nexport var FingerprintModal = function FingerprintModal(_ref) {\n  var isVisible = _ref.isVisible,\n      setVisibility = _ref.setVisibility,\n      onScanError = _ref.onScanError,\n      onScanSuccess = _ref.onScanSuccess;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVerified = _useState2[0],\n      setVerified = _useState2[1];\n\n  useEffect(function () {\n    if (Platform.OS == \"android\" && isVerified) {\n      handleScan();\n    }\n  }, [isVerified]);\n\n  var showError = function showError(error, onProceed) {\n    Alert.alert(\"Invalid Fingerprint\", error, [{\n      text: \"Ok\",\n      onPress: function onPress() {\n        return onProceed && onProceed();\n      }\n    }]);\n  };\n\n  var handleErrorScanning = function handleErrorScanning(error) {\n    if (onScanError) {\n      onScanError(error);\n    } else {\n      switch (error) {\n        case AUTHENTICATION_FAILED.value:\n          showError(AUTHENTICATION_FAILED.message);\n          break;\n\n        case TOO_FAST.value:\n          showError(TOO_FAST.message);\n          break;\n      }\n    }\n  };\n\n  var handleScan = function handleScan() {\n    var _await$authenticateAs, success, error;\n\n    return _regeneratorRuntime.async(function handleScan$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(authenticateAsync({\n              promptMessage: \"\"\n            }));\n\n          case 2:\n            _await$authenticateAs = _context.sent;\n            success = _await$authenticateAs.success;\n            error = _await$authenticateAs.error;\n\n            if (success) {\n              setVerified(true);\n              onScanSuccess();\n            } else if ([AUTHENTICATION_FAILED.value, TOO_FAST.value].includes(error)) {\n              handleErrorScanning(error);\n            } else {\n              cancelAuthenticate();\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Modal, {\n    isVisible: isVisible,\n    style: styles.defaultContainerStyle,\n    onBackButtonPress: function onBackButtonPress() {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.defaultContentStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    resizeMode: \"cover\",\n    style: styles.iconStyle,\n    source: isVerified ? require(\"res/images/ic_fingerprint_confirmed.png\") : require(\"res/images/ic_fingerprint.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: [styles.textStyle, {\n      color: isVerified ? \"#f9A010\" : \"#5D646C\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, isVerified ? \"Fingerprint Verified\" : \"Touch the fingerprint sensor to login.\"), React.createElement(ContainedButton, {\n    onPress: function onPress() {\n      setVisibility(false);\n      cancelAuthenticate();\n    },\n    label: \"Try login instead\",\n    buttonStyle: {\n      marginTop: 20\n    },\n    disabled: isVerified,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })));\n};\nFingerprintModal.propTypes = {\n  isVisible: PropTypes.bool,\n  setVisibility: PropTypes.func,\n  onScanError: PropTypes.func,\n  onScanSuccess: PropTypes.func\n};\nexport default FingerprintModal;","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/components/FingerprintModal/index.js"],"names":["React","useEffect","useState","PropTypes","Modal","ContainedButton","authenticateAsync","cancelAuthenticate","styles","icons","AUTHENTICATION_FAILED","TOO_FAST","FingerprintModal","isVisible","setVisibility","onScanError","onScanSuccess","isVerified","setVerified","Platform","OS","handleScan","showError","error","onProceed","Alert","alert","text","onPress","handleErrorScanning","value","message","promptMessage","success","includes","defaultContainerStyle","defaultContentStyle","iconStyle","require","textStyle","color","marginTop","propTypes","bool","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,eAAT;AACA,SACEC,iBADF,EAEEC,kBAFF,QAGO,2BAHP;AAIA,SAASC,MAAT;AACA,SAASC,KAAT;AACA,SAASC,qBAAT,EAAgCC,QAAhC;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAK1B;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,aAGI,QAHJA,aAGI;AAAA,MAFJC,WAEI,QAFJA,WAEI;AAAA,MADJC,aACI,QADJA,aACI;;AAAA,kBAC8Bd,QAAQ,CAAC,KAAD,CADtC;AAAA;AAAA,MACGe,UADH;AAAA,MACeC,WADf;;AAGJjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIkB,QAAQ,CAACC,EAAT,IAAe,SAAf,IAA4BH,UAAhC,EAA4C;AAE1CI,MAAAA,UAAU;AACX;AACF,GALQ,EAKN,CAACJ,UAAD,CALM,CAAT;;AAaA,MAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,SAAR,EAAsB;AACtCC,IAAAA,KAAK,CAACC,KAAN,CAAY,qBAAZ,EAAmCH,KAAnC,EAA0C,CACxC;AACEI,MAAAA,IAAI,EAAE,IADR;AAEEC,MAAAA,OAAO,EAAE;AAAA,eAAMJ,SAAS,IAAIA,SAAS,EAA5B;AAAA;AAFX,KADwC,CAA1C;AAMD,GAPD;;AAcA,MAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACN,KAAD,EAAW;AACrC,QAAIR,WAAJ,EAAiB;AACfA,MAAAA,WAAW,CAACQ,KAAD,CAAX;AACD,KAFD,MAEO;AACL,cAAQA,KAAR;AACE,aAAKb,qBAAqB,CAACoB,KAA3B;AACER,UAAAA,SAAS,CAACZ,qBAAqB,CAACqB,OAAvB,CAAT;AACA;;AACF,aAAKpB,QAAQ,CAACmB,KAAd;AACER,UAAAA,SAAS,CAACX,QAAQ,CAACoB,OAAV,CAAT;AACA;AANJ;AAQD;AACF,GAbD;;AAoBA,MAAMV,UAAU,GAAG,SAAbA,UAAa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACgBf,iBAAiB,CAAC;AAAE0B,cAAAA,aAAa,EAAE;AAAjB,aAAD,CADjC;;AAAA;AAAA;AACTC,YAAAA,OADS,yBACTA,OADS;AACAV,YAAAA,KADA,yBACAA,KADA;;AAGjB,gBAAIU,OAAJ,EAAa;AACXf,cAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,cAAAA,aAAa;AACd,aAHD,MAGO,IAAI,CAACN,qBAAqB,CAACoB,KAAvB,EAA8BnB,QAAQ,CAACmB,KAAvC,EAA8CI,QAA9C,CAAuDX,KAAvD,CAAJ,EAAmE;AACxEM,cAAAA,mBAAmB,CAACN,KAAD,CAAnB;AACD,aAFM,MAEA;AACLhB,cAAAA,kBAAkB;AACnB;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAaA,SACE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAEM,SADb;AAEE,IAAA,KAAK,EAAEL,MAAM,CAAC2B,qBAFhB;AAGE,IAAA,iBAAiB,EAAE,6BAAM,CAAE,CAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE3B,MAAM,CAAC4B,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,UAAU,EAAC,OADb;AAEE,IAAA,KAAK,EAAE5B,MAAM,CAAC6B,SAFhB;AAGE,IAAA,MAAM,EACJpB,UAAU,GACNqB,OAAO,CAAC,yCAAD,CADD,GAENA,OAAO,CAAC,+BAAD,CANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACL9B,MAAM,CAAC+B,SADF,EAEL;AAAEC,MAAAA,KAAK,EAAEvB,UAAU,GAAG,SAAH,GAAe;AAAlC,KAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGA,UAAU,GACP,sBADO,GAEP,wCARN,CAVF,EAoBE,oBAAC,eAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACbH,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAP,MAAAA,kBAAkB;AACnB,KAJH;AAKE,IAAA,KAAK,EAAC,mBALR;AAME,IAAA,WAAW,EAAE;AAAEkC,MAAAA,SAAS,EAAE;AAAb,KANf;AAOE,IAAA,QAAQ,EAAExB,UAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CALF,CADF;AAsCD,CA1GM;AA4GPL,gBAAgB,CAAC8B,SAAjB,GAA6B;AAC3B7B,EAAAA,SAAS,EAAEV,SAAS,CAACwC,IADM;AAE3B7B,EAAAA,aAAa,EAAEX,SAAS,CAACyC,IAFE;AAG3B7B,EAAAA,WAAW,EAAEZ,SAAS,CAACyC,IAHI;AAI3B5B,EAAAA,aAAa,EAAEb,SAAS,CAACyC;AAJE,CAA7B;AAOA,eAAehC,gBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Alert, Image, Platform, Text, View } from \"react-native\";\nimport PropTypes from 'prop-types';\nimport Modal from \"react-native-modal\";\nimport { ContainedButton } from \"../Buttons\";\nimport {\n  authenticateAsync,\n  cancelAuthenticate,\n} from \"expo-local-authentication\";\nimport { styles } from \"./styles\";\nimport { icons } from \"../../res/images/icons\"\nimport { AUTHENTICATION_FAILED, TOO_FAST } from \"../../constants/error\";\n\nexport const FingerprintModal = ({\n  isVisible,\n  setVisibility,\n  onScanError,\n  onScanSuccess,\n}) => {\n  const [isVerified, setVerified] = useState(false);\n\n  useEffect(() => {\n    if (Platform.OS == \"android\" && isVerified) {\n      // If the OS is Android, immediately scan fingerprint\n      handleScan();\n    }\n  }, [isVerified]);\n\n  /**\n   * showError\n   * @description Popup Error Message with Ok Button.\n   * @param {String} error Error Message\n   * @param {Function} onProceed Function that's called when the user pressed Ok Button\n   */\n  const showError = (error, onProceed) => {\n    Alert.alert(\"Invalid Fingerprint\", error, [\n      {\n        text: \"Ok\",\n        onPress: () => onProceed && onProceed(),\n      },\n    ]);\n  };\n\n  /**\n   * handleErrorScanning\n   * @description used for handling fingerprint scanning errors\n   * @param {String} error Error code\n   */\n  const handleErrorScanning = (error) => {\n    if (onScanError) {\n      onScanError(error);\n    } else {\n      switch (error) {\n        case AUTHENTICATION_FAILED.value:\n          showError(AUTHENTICATION_FAILED.message);\n          break;\n        case TOO_FAST.value:\n          showError(TOO_FAST.message);\n          break;\n      }\n    }\n  };\n\n  /**\n   * handleScan\n   * @description Used for scanning fingerprint\n   * @async\n   */\n  const handleScan = async () => {\n    const { success, error } = await authenticateAsync({ promptMessage: \"\" });\n\n    if (success) {\n      setVerified(true);\n      onScanSuccess();\n    } else if ([AUTHENTICATION_FAILED.value, TOO_FAST.value].includes(error)) {\n      handleErrorScanning(error);\n    } else {\n      cancelAuthenticate();\n    }\n  };\n\n  return (\n    <Modal\n      isVisible={isVisible}\n      style={styles.defaultContainerStyle}\n      onBackButtonPress={() => {}}\n    >\n      <View style={styles.defaultContentStyle}>\n        <Image\n          resizeMode=\"cover\"\n          style={styles.iconStyle}\n          source={\n            isVerified\n              ? require(\"res/images/ic_fingerprint_confirmed.png\")\n              : require(\"res/images/ic_fingerprint.png\")\n          }\n        />\n        <Text\n          style={[\n            styles.textStyle,\n            { color: isVerified ? \"#f9A010\" : \"#5D646C\" },\n          ]}\n        >\n          {isVerified\n            ? \"Fingerprint Verified\"\n            : \"Touch the fingerprint sensor to login.\"}\n        </Text>\n        <ContainedButton\n          onPress={() => {\n            setVisibility(false);\n            cancelAuthenticate();\n          }}\n          label=\"Try login instead\"\n          buttonStyle={{ marginTop: 20 }}\n          disabled={isVerified}\n        />\n      </View>\n    </Modal>\n  );\n};\n\nFingerprintModal.propTypes = {\n  isVisible: PropTypes.bool,\n  setVisibility: PropTypes.func,\n  onScanError: PropTypes.func,\n  onScanSuccess: PropTypes.func,\n};\n\nexport default FingerprintModal;\n"]},"metadata":{},"sourceType":"module"}