{"ast":null,"code":"import { FETCH_ACCOUNTS_INITIALIZE, FETCH_ACCOUNTS, FETCH_ACCOUNTS_ERROR, FETCH_ACCOUNTS_SUCCESS, FETCH_ACCOUNT_HISTORY_INITIALIZE, FETCH_ACCOUNT_HISTORY, FETCH_ACCOUNT_HISTORY_ERROR, FETCH_ACCOUNT_HISTORY_SUCCESS, FETCH_ACCOUNT_INFO_INITIALIZE, FETCH_ACCOUNT_INFO, FETCH_ACCOUNT_INFO_ERROR, FETCH_ACCOUNT_INFO_SUCCESS } from \"../actions\";\nimport { bankAccount } from \"../../API/index\";\nexport var fetchAccountsInitialize = function fetchAccountsInitialize() {\n  return {\n    type: FETCH_ACCOUNTS_INITIALIZE\n  };\n};\nexport var fetchAccountsStart = function fetchAccountsStart(CISNumber) {\n  return {\n    type: FETCH_ACCOUNTS,\n    payload: {\n      CISNumber: CISNumber\n    }\n  };\n};\nexport var fetchAccountsError = function fetchAccountsError(error) {\n  return {\n    type: FETCH_ACCOUNTS_ERROR,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var fetchAccountsSuccess = function fetchAccountsSuccess(list, listById) {\n  return {\n    type: FETCH_ACCOUNTS_SUCCESS,\n    payload: {\n      list: list,\n      listById: listById\n    }\n  };\n};\nexport var fetchAccountHistoryInitialize = function fetchAccountHistoryInitialize() {\n  return {\n    type: FETCH_ACCOUNT_HISTORY_INITIALIZE\n  };\n};\nexport var fetchAccountHistoryStart = function fetchAccountHistoryStart(accountNumber, count) {\n  return {\n    type: FETCH_ACCOUNT_HISTORY,\n    payload: {\n      accountNumber: accountNumber,\n      historyCount: count\n    }\n  };\n};\nexport var fetchAccountHistoryError = function fetchAccountHistoryError(error) {\n  return {\n    type: FETCH_ACCOUNT_HISTORY_ERROR,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var fetchAccountHistorySuccess = function fetchAccountHistorySuccess(list, listById) {\n  return {\n    type: FETCH_ACCOUNT_HISTORY_SUCCESS,\n    payload: {\n      historyList: list,\n      historyListById: listById\n    }\n  };\n};\nexport var fetchAccountInfoInitialize = function fetchAccountInfoInitialize() {\n  return {\n    type: FETCH_ACCOUNT_INFO_INITIALIZE\n  };\n};\nexport var fetchAccountInfoStart = function fetchAccountInfoStart(accountNumber) {\n  return {\n    type: FETCH_ACCOUNT_INFO,\n    payload: {\n      accountNumber: accountNumber\n    }\n  };\n};\nexport var fetchAccountInfoError = function fetchAccountInfoError(error) {\n  return {\n    type: FETCH_ACCOUNT_INFO_ERROR,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var fetchAccountInfoSuccess = function fetchAccountInfoSuccess(list, listById) {\n  return {\n    type: FETCH_ACCOUNT_INFO_SUCCESS,\n    payload: {\n      infoList: list,\n      infoListById: listById\n    }\n  };\n};\nexport var fetchAccounts = function fetchAccounts(CISNumber) {\n  return function (dispatch) {\n    dispatch(fetchAccountsStart(CISNumber));\n    return bankAccount.get(CISNumber).then(function (_ref) {\n      var data = _ref.data.data;\n      var _data$AccountInfo = data[\"Account.Info\"],\n          errorMessage = _data$AccountInfo.ErrorMsg,\n          accountListUnformatted = _data$AccountInfo.accts.a;\n\n      if (errorMessage !== \"\") {\n        var accounts = [];\n        var accountList = {};\n        var accountsLisById = [];\n        accountListUnformatted instanceof Object && accounts.push(accountListUnformatted);\n        accounts.map(function (account) {\n          var accountNumber = account.acctno,\n              accountNumberFormatted = account.AcctNoFormatted,\n              name = account.Name1,\n              currencyCode = account.CurrencyCode,\n              balance = account.Ledger,\n              balanceFormatted = account.LedgerFormatted,\n              accountDescription = account.acctdesc,\n              accountName = account.acctname,\n              accountType = account.accttype,\n              amountCent = account.amt_cent,\n              amountWhole = account.amt_whole;\n          accountList[accountNumberFormatted] = {\n            accountDescription: accountDescription,\n            accountName: accountName,\n            accountNumber: accountNumber,\n            accountNumberFormatted: accountNumberFormatted,\n            accountType: accountType,\n            amountCent: amountCent,\n            amountWhole: amountWhole,\n            balance: balance,\n            balanceFormatted: balanceFormatted,\n            currencyCode: currencyCode,\n            name: name\n          };\n          accountsLisById.push(accountNumberFormatted);\n        });\n        dispatch(fetchAccountsSuccess(accountList, accountsLisById));\n      } else {\n        dispatch(fetchAccountsError(errorMessage));\n      }\n    }).catch(function (error) {\n      return dispatch(fetchAccountsError(error));\n    });\n  };\n};\nexport var fetchAccountInfo = function fetchAccountInfo(accountNumber) {\n  return function (dispatch) {\n    dispatch(fetchAccountInfoStart(accountNumber));\n    return bankAccount.getInfo(accountNumber).then(function (_ref2) {\n      var data = _ref2.data.data;\n      var errorMessage = data[\"Account.Info\"].ErrorMsg;\n    }).catch(function (error) {\n      return dispatch(fetchAccountInfoError(error));\n    });\n  };\n};\nexport var fetchAccountHistory = function fetchAccountHistory(accountNumber, count) {\n  return function (dispatch) {\n    dispatch(fetchAccountHistoryStart(accountNumber, count));\n    return bankAccount.getHistory().then(function (_ref3) {\n      var data = _ref3.data.data;\n      var _data$AccountInfo2 = data[\"Account.Info\"],\n          errorMessage = _data$AccountInfo2.ErrorMsg,\n          tis = _data$AccountInfo2.tis;\n\n      if (errorMessage !== \"\") {}\n    }).catch(function (error) {\n      return dispatch(fetchAccountHistoryError(error));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/redux/account/actions.js"],"names":["FETCH_ACCOUNTS_INITIALIZE","FETCH_ACCOUNTS","FETCH_ACCOUNTS_ERROR","FETCH_ACCOUNTS_SUCCESS","FETCH_ACCOUNT_HISTORY_INITIALIZE","FETCH_ACCOUNT_HISTORY","FETCH_ACCOUNT_HISTORY_ERROR","FETCH_ACCOUNT_HISTORY_SUCCESS","FETCH_ACCOUNT_INFO_INITIALIZE","FETCH_ACCOUNT_INFO","FETCH_ACCOUNT_INFO_ERROR","FETCH_ACCOUNT_INFO_SUCCESS","bankAccount","fetchAccountsInitialize","type","fetchAccountsStart","CISNumber","payload","fetchAccountsError","error","fetchAccountsSuccess","list","listById","fetchAccountHistoryInitialize","fetchAccountHistoryStart","accountNumber","count","historyCount","fetchAccountHistoryError","fetchAccountHistorySuccess","historyList","historyListById","fetchAccountInfoInitialize","fetchAccountInfoStart","fetchAccountInfoError","fetchAccountInfoSuccess","infoList","infoListById","fetchAccounts","dispatch","get","then","data","errorMessage","ErrorMsg","accountListUnformatted","accts","a","accounts","accountList","accountsLisById","Object","push","map","account","acctno","accountNumberFormatted","AcctNoFormatted","name","Name1","currencyCode","CurrencyCode","balance","Ledger","balanceFormatted","LedgerFormatted","accountDescription","acctdesc","accountName","acctname","accountType","accttype","amountCent","amt_cent","amountWhole","amt_whole","catch","fetchAccountInfo","getInfo","fetchAccountHistory","getHistory","tis"],"mappings":"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","sourcesContent":["import {\n  FETCH_ACCOUNTS_INITIALIZE,\n  FETCH_ACCOUNTS,\n  FETCH_ACCOUNTS_ERROR,\n  FETCH_ACCOUNTS_SUCCESS,\n  FETCH_ACCOUNT_HISTORY_INITIALIZE,\n  FETCH_ACCOUNT_HISTORY,\n  FETCH_ACCOUNT_HISTORY_ERROR,\n  FETCH_ACCOUNT_HISTORY_SUCCESS,\n  FETCH_ACCOUNT_INFO_INITIALIZE,\n  FETCH_ACCOUNT_INFO,\n  FETCH_ACCOUNT_INFO_ERROR,\n  FETCH_ACCOUNT_INFO_SUCCESS,\n} from \"../actions\";\n\nimport { bankAccount } from \"../../API/index\";\n\n/***********************\n * ACTION CREATORS\n ***********************/\n\nexport const fetchAccountsInitialize = () => ({\n  type: FETCH_ACCOUNTS_INITIALIZE,\n});\n\nexport const fetchAccountsStart = (CISNumber) => ({\n  type: FETCH_ACCOUNTS,\n  payload: {\n    CISNumber,\n  },\n});\n\nexport const fetchAccountsError = (error) => ({\n  type: FETCH_ACCOUNTS_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const fetchAccountsSuccess = (list, listById) => ({\n  type: FETCH_ACCOUNTS_SUCCESS,\n  payload: {\n    list,\n    listById,\n  },\n});\n\nexport const fetchAccountHistoryInitialize = () => ({\n  type: FETCH_ACCOUNT_HISTORY_INITIALIZE,\n});\n\nexport const fetchAccountHistoryStart = (accountNumber, count) => ({\n  type: FETCH_ACCOUNT_HISTORY,\n  payload: {\n    accountNumber,\n    historyCount: count,\n  },\n});\n\nexport const fetchAccountHistoryError = (error) => ({\n  type: FETCH_ACCOUNT_HISTORY_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const fetchAccountHistorySuccess = (list, listById) => ({\n  type: FETCH_ACCOUNT_HISTORY_SUCCESS,\n  payload: {\n    historyList: list,\n    historyListById: listById,\n  },\n});\n\nexport const fetchAccountInfoInitialize = () => ({\n  type: FETCH_ACCOUNT_INFO_INITIALIZE,\n});\n\nexport const fetchAccountInfoStart = (accountNumber) => ({\n  type: FETCH_ACCOUNT_INFO,\n  payload: {\n    accountNumber,\n  },\n});\n\nexport const fetchAccountInfoError = (error) => ({\n  type: FETCH_ACCOUNT_INFO_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport const fetchAccountInfoSuccess = (list, listById) => ({\n  type: FETCH_ACCOUNT_INFO_SUCCESS,\n  payload: {\n    infoList: list,\n    infoListById: listById,\n  },\n});\n\n/***********************\n * API WITH DISPATCH\n ***********************/\n\n/**\n * @description Used for fetching Bank Accounts\n * @param {String} CISNumber \n */\nexport const fetchAccounts = (CISNumber) => {\n  return (dispatch) => {\n    dispatch(fetchAccountsStart(CISNumber));\n    return bankAccount\n      .get(CISNumber)\n      .then(({ data: { data } }) => {\n        const {\n          ErrorMsg: errorMessage,\n          accts: { a: accountListUnformatted },\n        } = data[\"Account.Info\"];\n\n        if (errorMessage !== \"\") {\n          let accounts = [];\n          let accountList = {};\n          let accountsLisById = [];\n\n          accountListUnformatted instanceof Object &&\n            accounts.push(accountListUnformatted);\n\n          accounts.map((account) => {\n            const {\n              acctno: accountNumber,\n              AcctNoFormatted: accountNumberFormatted,\n              Name1: name,\n              CurrencyCode: currencyCode,\n              Ledger: balance,\n              LedgerFormatted: balanceFormatted,\n              acctdesc: accountDescription,\n              acctname: accountName,\n              accttype: accountType,\n              amt_cent: amountCent,\n              amt_whole: amountWhole,\n            } = account;\n\n            accountList[accountNumberFormatted] = {\n              accountDescription,\n              accountName,\n              accountNumber,\n              accountNumberFormatted,\n              accountType,\n              amountCent,\n              amountWhole,\n              balance,\n              balanceFormatted,\n              currencyCode,\n              name,\n            };\n\n            accountsLisById.push(accountNumberFormatted);\n          });\n\n          dispatch(fetchAccountsSuccess(accountList, accountsLisById));\n        } else {\n          dispatch(fetchAccountsError(errorMessage));\n        }\n      })\n      .catch((error) => dispatch(fetchAccountsError(error)));\n  };\n};\n\nexport const fetchAccountInfo = (accountNumber) => {\n  return dispatch => {\n    dispatch(fetchAccountInfoStart(accountNumber));\n    return bankAccount\n      .getInfo(accountNumber)\n      .then( ( {data: { data } } ) => {\n        const {\n          ErrorMsg: errorMessage,\n        } = data[\"Account.Info\"]\n      })\n      .catch(error => dispatch(fetchAccountInfoError(error)));\n  }\n}\n\nexport const fetchAccountHistory = (accountNumber, count) => {\n  return dispatch => {\n    dispatch(fetchAccountHistoryStart(accountNumber, count));\n    return bankAccount\n      .getHistory()\n      .then(({data: { data }}) => {\n        const {\n          ErrorMsg: errorMessage,\n          tis\n        } = data[\"Account.Info\"];\n\n        if(errorMessage !== \"\") {\n          \n        }\n      })\n      .catch(error => dispatch(fetchAccountHistoryError(error)));\n  }\n}"]},"metadata":{},"sourceType":"module"}