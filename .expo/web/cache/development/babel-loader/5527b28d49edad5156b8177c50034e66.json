{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/OTP/ModifiedOTP.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport { Loader, OTP } from \"../../components/\";\nexport var ModifiedOTP = function ModifiedOTP(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      code = _useState2[0],\n      setCode = _useState2[1];\n\n  var isLoading = props.isLoading,\n      loadingText = props.loadingText,\n      onDone = props.onDone;\n  useEffect(function () {\n    if (code.length >= 7) {\n      onDone(code);\n    }\n  }, [code]);\n\n  var handleRemove = function handleRemove() {\n    if (code.length > 0) {\n      setCode(code.slice(0, -1));\n    }\n  };\n\n  var handleChangeValue = function handleChangeValue() {\n    var addedCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n    if (code.length < 7) {\n      setCode(code + addedCode);\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, React.createElement(OTP, {\n    onChangeValue: handleChangeValue,\n    onRemove: handleRemove,\n    value: code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), React.createElement(Loader, {\n    isVisible: isLoading,\n    loadingText: loadingText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n};\nModifiedOTP.propTypes = {\n  isLoading: PropTypes.bool,\n  loadingText: PropTypes.string,\n  onDone: PropTypes.func.isRequired\n};\nexport default ModifiedOTP;","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/OTP/ModifiedOTP.js"],"names":["React","useEffect","useState","PropTypes","Loader","OTP","ModifiedOTP","props","code","setCode","isLoading","loadingText","onDone","length","handleRemove","slice","handleChangeValue","addedCode","propTypes","bool","string","func","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,GAAjB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA,kBACZL,QAAQ,CAAC,EAAD,CADI;AAAA;AAAA,MAC7BM,IAD6B;AAAA,MACvBC,OADuB;;AAAA,MAE5BC,SAF4B,GAEOH,KAFP,CAE5BG,SAF4B;AAAA,MAEjBC,WAFiB,GAEOJ,KAFP,CAEjBI,WAFiB;AAAA,MAEJC,MAFI,GAEOL,KAFP,CAEJK,MAFI;AAIpCX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,IAAI,CAACK,MAAL,IAAe,CAAnB,EAAsB;AACpBD,MAAAA,MAAM,CAACJ,IAAD,CAAN;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;;AAMA,MAAMM,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAIN,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;AACnBJ,MAAAA,OAAO,CAACD,IAAI,CAACO,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAD,CAAP;AACD;AACF,GAJD;;AAMA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAoB;AAAA,QAAnBC,SAAmB,uEAAP,EAAO;;AAC5C,QAAIT,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;AACnBJ,MAAAA,OAAO,CAACD,IAAI,GAAGS,SAAR,CAAP;AACD;AACF,GAJD;;AAMA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AACE,IAAA,aAAa,EAAED,iBADjB;AAEE,IAAA,QAAQ,EAAEF,YAFZ;AAGE,IAAA,KAAK,EAAEN,IAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEE,SAAnB;AAA8B,IAAA,WAAW,EAAEC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAhCM;AAkCPL,WAAW,CAACY,SAAZ,GAAwB;AACtBR,EAAAA,SAAS,EAAEP,SAAS,CAACgB,IADC;AAEtBR,EAAAA,WAAW,EAAER,SAAS,CAACiB,MAFD;AAGtBR,EAAAA,MAAM,EAAET,SAAS,CAACkB,IAAV,CAAeC;AAHD,CAAxB;AAMA,eAAehB,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from 'prop-types'\nimport { Loader, OTP } from \"../../components/\";\n\nexport const ModifiedOTP = (props) => {\n  const [code, setCode] = useState(\"\");\n  const { isLoading, loadingText, onDone } = props;\n\n  useEffect(() => {\n    if (code.length >= 7) {\n      onDone(code);\n    }\n  }, [code]);\n\n  const handleRemove = () => {\n    if (code.length > 0) {\n      setCode(code.slice(0, -1));\n    }\n  };\n\n  const handleChangeValue = (addedCode = \"\") => {\n    if (code.length < 7) {\n      setCode(code + addedCode);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <OTP\n        onChangeValue={handleChangeValue}\n        onRemove={handleRemove}\n        value={code}\n      />\n      <Loader isVisible={isLoading} loadingText={loadingText} />\n    </React.Fragment>\n  );\n};\n\nModifiedOTP.propTypes = {\n  isLoading: PropTypes.bool, \n  loadingText: PropTypes.string, \n  onDone: PropTypes.func.isRequired\n}\n\nexport default ModifiedOTP;\n"]},"metadata":{},"sourceType":"module"}