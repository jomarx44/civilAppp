{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/TransferMoney/forms/OtherBanks/TransferFormContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport validate from \"validate.js\";\nimport { TransferForm } from \"./TransferForm\";\nimport { config } from \"./config\";\nexport var TransferFormContainer = function TransferFormContainer(props) {\n  var _route$params3;\n\n  var _useState = useState({\n    sourceAccount: {},\n    bankCode: \"\",\n    sourceAccountNumber: \"\",\n    recipientAccountNumber: \"\",\n    recipientAccountName: \"\",\n    recipientBankName: \"\",\n    amount: \"\",\n    recipientEmailAddress: \"\",\n    recipientMobileNumber: \"\",\n    paymentDescription: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formData = _useState2[0],\n      setFormData = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      invalids = _useState4[0],\n      setInvalids = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSubmitting = _useState6[0],\n      setSubmittingStatus = _useState6[1];\n\n  var route = props.route,\n      navigation = props.navigation,\n      list = props.list;\n  useEffect(function () {\n    var _route$params;\n\n    if ((_route$params = route.params) == null ? void 0 : _route$params.formData) {\n      setFormData(function (currentFormData) {\n        var _route$params2;\n\n        return _objectSpread(_objectSpread({}, currentFormData), (_route$params2 = route.params) == null ? void 0 : _route$params2.formData);\n      });\n    }\n  }, [(_route$params3 = route.params) == null ? void 0 : _route$params3.formData]);\n\n  var handleSelectSource = function handleSelectSource() {\n    navigation.navigate(\"SelectSourceAccount\", {\n      previousRouteName: \"OtherBanksTransferForm\"\n    });\n  };\n\n  var handleBlur = function handleBlur(index) {\n    var additionalValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var newInvalids = {};\n\n    if (__DEV__) {\n      if (!formData[index]) {\n        console.warn(\"'\" + index + \"' index is not found in [formData] state.\");\n      }\n\n      if (!config.constraints[index]) {\n        console.warn(\"There are no Validation Constraints for '\" + index + \"' form data index.\");\n      }\n    }\n\n    var toBeValidated = _objectSpread(_objectSpread({}, additionalValidation), {}, _defineProperty({}, index, formData[index]));\n\n    var invalid = handleValidate(toBeValidated, _defineProperty({}, index, config.constraints[index]));\n\n    if (!invalid) {\n      newInvalids = _objectSpread({}, invalids);\n      delete newInvalids[index];\n    } else {\n      newInvalids = _objectSpread(_objectSpread({}, invalids), invalid);\n    }\n\n    setInvalids(newInvalids);\n    return newInvalids;\n  };\n\n  var handleChange = function handleChange(index, value) {\n    setFormData(function (currentFormData) {\n      return _objectSpread(_objectSpread({}, currentFormData), {}, _defineProperty({}, index, value));\n    });\n  };\n\n  var handleSubmit = function handleSubmit() {\n    var invalid = handleValidate(formData, config.constraints);\n\n    if (invalid) {\n      setInvalids(invalid);\n    } else {\n      navigation.navigate(\"ReviewTransfer\", {\n        previousRouteName: \"OtherBanksTransferForm\",\n        transferMoneyData: formData\n      });\n    }\n  };\n\n  var handleValidate = function handleValidate() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var invalid = validate(data, constraints);\n    return invalid;\n  };\n\n  return React.createElement(TransferForm, {\n    data: formData,\n    invalids: invalids,\n    isSubmitting: isSubmitting,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    onSelectSource: handleSelectSource,\n    bankList: Object.values(list.bank.list),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  });\n};\nTransferFormContainer.propTypes = {};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return function () {\n    return {\n      list: state.list\n    };\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferFormContainer);","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/TransferMoney/forms/OtherBanks/TransferFormContainer.js"],"names":["React","useEffect","useState","PropTypes","connect","validate","TransferForm","config","TransferFormContainer","props","sourceAccount","bankCode","sourceAccountNumber","recipientAccountNumber","recipientAccountName","recipientBankName","amount","recipientEmailAddress","recipientMobileNumber","paymentDescription","formData","setFormData","invalids","setInvalids","isSubmitting","setSubmittingStatus","route","navigation","list","params","currentFormData","handleSelectSource","navigate","previousRouteName","handleBlur","index","additionalValidation","newInvalids","__DEV__","console","warn","constraints","toBeValidated","invalid","handleValidate","handleChange","value","handleSubmit","transferMoneyData","data","Object","values","bank","propTypes","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport validate from \"validate.js\";\n\n// Form Component\nimport { TransferForm } from \"./TransferForm\";\n\n// Custom Component Here\n\n// Others\nimport { config } from \"./config\";\n\nexport const TransferFormContainer = (props) => {\n  const [formData, setFormData] = useState({\n    sourceAccount: {},\n    bankCode: \"\",\n    sourceAccountNumber: \"\",\n    recipientAccountNumber: \"\",\n    recipientAccountName: \"\",\n    recipientBankName: \"\",\n    amount: \"\",\n    recipientEmailAddress: \"\",\n    recipientMobileNumber: \"\",\n    paymentDescription: \"\",\n  });\n  const [invalids, setInvalids] = useState({});\n  const [isSubmitting, setSubmittingStatus] = useState(false);\n  const { route, navigation, list } = props;\n\n  useEffect(() => {\n    if(route.params?.formData) {\n      setFormData((currentFormData) => ({\n        ...currentFormData,\n        ...route.params?.formData\n      }));\n    }\n  }, [route.params?.formData])\n\n  const handleSelectSource = () => {\n    navigation.navigate(\"SelectSourceAccount\", {\n      previousRouteName: \"OtherBanksTransferForm\"\n    })\n  }\n\n  /**\n   * Handle Blur Event Listener\n   * @description Used for validating inputs when onBlur event is triggered\n   * @param {String} index formData index\n   * @param {Object} additionalValidation Additional data for validation (used for Equality Validation)\n   */\n  const handleBlur = (index, additionalValidation = {}) => {\n    let newInvalids = {};\n\n    if (__DEV__) {\n      // Warn the user if the given index doesn't exist in [formData] state\n      if (!formData[index]) {\n        console.warn(`'${index}' index is not found in [formData] state.`);\n      }\n\n      // Warn the user if there's no Validation Constraints to the specified index\n      if (!config.constraints[index]) {\n        console.warn(\n          `There are no Validation Constraints for '${index}' form data index.`\n        );\n      }\n    }\n\n    const toBeValidated = {\n      ...additionalValidation,\n      [index]: formData[index],\n    };\n\n    const invalid = handleValidate(toBeValidated, {\n      [index]: config.constraints[index],\n    });\n\n    if (!invalid) {\n      // Remove the specified index from [invalids] state\n      newInvalids = { ...invalids };\n      delete newInvalids[index];\n    } else {\n      // Add [invalid] to [invalids] state\n      newInvalids = {\n        ...invalids,\n        ...invalid,\n      };\n    }\n\n    // Set new Invalids as [invalids] state\n    setInvalids(newInvalids);\n\n    // Return New Invalids\n    return newInvalids;\n  };\n\n  const handleChange = (index, value) => {\n    setFormData((currentFormData) => ({\n      ...currentFormData,\n      [index]: value,\n    }));\n  };\n\n  const handleSubmit = () => {\n    // Validate\n    const invalid = handleValidate(formData, config.constraints);\n    if (invalid) {\n      setInvalids(invalid);\n    } else {\n      navigation.navigate(\"ReviewTransfer\", {\n        previousRouteName: \"OtherBanksTransferForm\",\n        transferMoneyData: formData,\n      });\n    }\n  };\n\n  const handleValidate = (data = {}, constraints = {}) => {\n    const invalid = validate(data, constraints);\n    // Do additional invalid data processing here\n    return invalid;\n  };\n\n  return (\n    <TransferForm\n      data={formData}\n      invalids={invalids}\n      isSubmitting={isSubmitting}\n      onBlur={handleBlur}\n      onChange={handleChange}\n      onSubmit={handleSubmit}\n      onSelectSource={handleSelectSource}\n      bankList={Object.values(list.bank.list)}\n    />\n  );\n};\n\nTransferFormContainer.propTypes = {};\n\nconst mapStateToProps = (state) => () => {\n  return {list: state.list};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TransferFormContainer);\n"]},"metadata":{},"sourceType":"module"}