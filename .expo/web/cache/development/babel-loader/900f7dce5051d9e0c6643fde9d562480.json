{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/OTP/OTPMobileAccount.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { connect } from 'react-redux';\nimport { ModifiedOTP } from \"./ModifiedOTP\";\nimport { OTP, profile } from \"../../API\";\nexport var OTPMobileAccount = function OTPMobileAccount(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoadingState = _useState2[1];\n\n  var _useState3 = useState(\"Verifying OTP Code\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingText = _useState4[0],\n      setLoadingText = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      token = _useState6[0],\n      setToken = _useState6[1];\n\n  var auth = props.auth,\n      navigation = props.navigation,\n      params = props.route.params;\n  useEffect(function () {\n    if (!(params == null ? void 0 : params.phoneNumber)) {\n      Alert.alert(\"Failed\", \"You need to verify your email first.\", [{\n        text: \"Ok\",\n        onPress: function onPress() {\n          return navigation.navigate(\"EmailConfirmation\");\n        }\n      }]);\n    } else {\n      handleRequestOTP();\n    }\n  }, [params == null ? void 0 : params.phoneNumber]);\n\n  var handleRequestOTP = function handleRequestOTP() {\n    console.log(\"Phone Number: \", params == null ? void 0 : params.phoneNumber);\n    OTP.request({\n      mobileNumber: params == null ? void 0 : params.phoneNumber\n    }, {\n      mobileNumber: params == null ? void 0 : params.phoneNumber\n    }).then(function (_ref) {\n      var _ref$data = _ref.data,\n          message = _ref$data.msg,\n          status = _ref$data.status,\n          token = _ref$data.token;\n\n      if (token) {\n        console.log(\"Token: \", token);\n        setToken(token);\n        return true;\n      }\n\n      Alert.alert(\"Invalid Phone Number\", message, [{\n        text: \"Retry\",\n        onPress: function onPress() {\n          return handleRequestOTP();\n        }\n      }, {\n        text: \"Cancel\",\n        onPress: handleBack,\n        style: \"cancel\"\n      }]);\n    }).catch(function (error) {\n      Alert.alert(\"Server Error\", \"Ooops! There's something wrong connecting to the server. Please try again.\");\n    });\n    return false;\n  };\n\n  var handleBack = function handleBack() {\n    navigation.navigate(\"EmailConfirmation\");\n  };\n\n  var handleDone = function handleDone(code) {\n    setLoadingState(true);\n    setLoadingText(\"Verifying OTP Code\");\n    OTP.verify(code, token).then(function (_ref2) {\n      var data = _ref2.data.data;\n      var message = data.message,\n          status = data.status;\n\n      if (status === \"ok\") {\n        Alert.alert(\"Successfull\", \"You have successfully created an account. Please try loggin in.\", [{\n          text: \"Ok\",\n          onPress: function onPress() {\n            return navigation.navigate(\"Login\");\n          }\n        }]);\n      } else {\n        Alert.alert(\"Mismatch Token and Code\", \"The OTP you entered is invalid. Please try again.\");\n      }\n    }).catch(function (error) {\n      Alert.alert(\"Server Error\", \"Ooops! There's something wrong connecting to the server. Please try again.\");\n    }).finally(function () {\n      return setLoadingState(false);\n    });\n  };\n\n  return React.createElement(ModifiedOTP, {\n    onDone: handleDone,\n    isLoading: isLoading,\n    loadingText: loadingText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  });\n};\nOTPMobileAccount.propTypes = {};\n\nvar mapStateToProps = function mapStateToProps(props) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OTPMobileAccount);","map":{"version":3,"sources":["/Users/thadz/Desktop/SunSavings/fixedProfileAndTransfer/pnmobileapp/src/screens/OTP/OTPMobileAccount.js"],"names":["React","useEffect","useState","PropTypes","connect","ModifiedOTP","OTP","profile","OTPMobileAccount","props","isLoading","setLoadingState","loadingText","setLoadingText","token","setToken","auth","navigation","params","route","phoneNumber","Alert","alert","text","onPress","navigate","handleRequestOTP","console","log","request","mobileNumber","then","data","message","msg","status","handleBack","style","catch","error","handleDone","code","verify","finally","propTypes","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Alert } from \"react-native\";\nimport { connect } from 'react-redux'\nimport { ModifiedOTP } from \"./ModifiedOTP\"\n\n// Others\nimport { OTP, profile } from \"../../API\";\n\nexport const OTPMobileAccount = (props) => {\n  const [isLoading, setLoadingState] = useState(false);\n  const [loadingText, setLoadingText] = useState(\"Verifying OTP Code\");\n  const [token, setToken] = useState(null);\n  const {\n    auth,\n    navigation,\n    route: { params },\n  } = props;\n\n  useEffect(() => {\n    if (!params?.phoneNumber) {\n      Alert.alert(\n        \"Failed\",\n        \"You need to verify your email first.\",\n        [\n          {\n            text: \"Ok\",\n            onPress: () => navigation.navigate(\"EmailConfirmation\"),\n          },\n        ]\n      );\n    } else {\n      handleRequestOTP()\n    }\n  }, [params?.phoneNumber]);\n\n  const handleRequestOTP = () => {\n    console.log(\"Phone Number: \", params?.phoneNumber);\n    OTP.request(\n      {\n        mobileNumber: params?.phoneNumber\n      },\n      {\n        mobileNumber: params?.phoneNumber,\n      }\n    )\n      .then(({ data: { msg: message, status, token } }) => {\n        if (token) {\n          console.log(\"Token: \", token)\n          setToken(token);\n          return true;\n        }\n\n        Alert.alert(\"Invalid Phone Number\", message, [\n          {\n            text: \"Retry\",\n            onPress: () => handleRequestOTP(),\n          },\n          {\n            text: \"Cancel\",\n            onPress: handleBack,\n            style: \"cancel\",\n          },\n        ]);\n      })\n      .catch((error) => {\n        Alert.alert(\n          \"Server Error\",\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      });\n\n    return false;\n  };\n  \n  const handleBack = () => {\n    navigation.navigate(\"EmailConfirmation\");\n  };\n\n  const handleDone = (code) => {\n    setLoadingState(true);\n    setLoadingText(\"Verifying OTP Code\")\n    OTP.verify(code, token)\n      .then(({ data: { data } }) => {\n        const { message, status } = data;\n        if (status === \"ok\") {\n          Alert.alert(\"Successfull\", \"You have successfully created an account. Please try loggin in.\", [\n            {\n              text: \"Ok\",\n              onPress: () => navigation.navigate(\"Login\")\n            }\n          ])\n        } else {\n          Alert.alert(\n            \"Mismatch Token and Code\",\n            \"The OTP you entered is invalid. Please try again.\"\n          );\n        }\n      })\n      .catch((error) => {\n        Alert.alert(\n          \"Server Error\",\n          \"Ooops! There's something wrong connecting to the server. Please try again.\"\n        );\n      })\n      .finally(() => setLoadingState(false));\n    \n  }\n\n  return (\n    <ModifiedOTP \n      onDone={handleDone}\n      isLoading={isLoading}\n      loadingText={loadingText}\n    />\n  )\n}\n\nOTPMobileAccount.propTypes = {}\n\nconst mapStateToProps = (props) => ({});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(OTPMobileAccount);\n"]},"metadata":{},"sourceType":"module"}