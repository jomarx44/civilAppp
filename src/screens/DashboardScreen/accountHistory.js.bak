import React from "react";

import {
  ActivityIndicator,
  StatusBar,
  Image,
  Dimensions,
  StyleSheet,
  ImageBackground,
  TextInput,
  View,
  BackHandler,
  PixelRatio,
  SafeAreaView,
  FlatList
} from "react-native";
import {
  Container,
  Header,
  Title,
  Left,
  Center,
  Icon,
  Right,
  Button,
  Body,
  Content,
  Text,
  Card,
  CardItem
} from "native-base";

import styles from "styles/commonStyle";
import PNHeaderNoLogoCenterText from "library/components/PNHeaderNoLogo";
import PNTransparentButton from "library/components/PNTransparentButton";
import PNHeaderBackButtonBlue from "library/components/PNHeaderBackButtonBlue";
import { thisExpression } from "@babel/types";
import { connect } from "react-redux";
import API from "../../actions/api";

const DATA = [
  {
    id: "1",
    title: "Payroll",
    date: "11-15-2019",
    amount: 5950.0
  },
  {
    id: "2",
    title: "ATM Withdrawal",
    date: "11-01-2019",
    amount: -20000.0
  },
  {
    id: "3",
    title: "ATM Withdrawal",
    date: "10-30-2019",
    amount: 8000.0
  },
  {
    id: "4",
    title: "Payroll",
    date: "10-15-2019",
    amount: 14000.0
  },
  {
    id: "5",
    title: "Payroll",
    date: "10-1-2019",
    amount: 14000.0
  },
  {
    id: "6",
    title: "ATM Withdrawal",
    date: "10-5-2019",
    amount: -19000.0
  }
];

numFixed = amount => {
  amount = Math.abs(amount);
  amount = amount.toFixed(2);

  let str = amount.split(".");
  if (str[0].length >= 4) {
    str[0] = str[0].replace(/(\d)(?=(\d{3})+$)/g, "$1,");
  }
  if (str[1] && str[1].length >= 4) {
    str[1] = str[1].replace(/(\d{3})/g, "$1 ");
  }
  return str.join(".");
};

function Item({ title, date, amount }) {
  return (
    <View style={localStyles.listItem}>
      <View style={{flex: 1, flexDirection: 'column', justifyContent: 'space-between'}}>
        <Text style={localStyles.itemText}>{title}</Text>
        <Text style={localStyles.dateText}>{date}</Text>
      </View>
      <View style={{flex: 1, justifyContent: 'center'}}>
        <Text
          style={[
            localStyles.amountText,
            { color: Math.sign(amount) === -1 ? "green" : "red" }
          ]}
        >
          {Math.sign(amount) === 1
            ? "(PHP " + numFixed(amount) + ")"
            : "PHP " + numFixed(amount)}
        </Text>
      </View>
    </View>
  );
}

class AccountHistoryScreen extends React.Component {
  state = {
    acctno: ""
  };

  constructor(props) {
    super(props);
  }

  componentDidMount() {
    this.setState({ acctno: this.props.navigation.getParam("acctno", "") });
    this.props.getAccountDetails();
  }

  static navigationOptions = {
    header: <PNHeaderNoLogoCenterText title="Savings Account" />
  };

  render() {
    const { is_fetching, account } = this.props.accountDetails;
    
    if(account.balance.formatted) {
      console.log("ASDASDASDASDAS");
    }
    return (
      <Container>
        <View style={localStyles.viewHeader}>
          <Text style={localStyles.title}>CURRENT BALANCE</Text>
            { is_fetching && (
              <View
                style={{
                  flex: 1,
                  justifyContent: "center",
                  alignItems: "center"
                }}
              >
                <ActivityIndicator size="large" />
              </View>
            )}
            { !is_fetching && account.balance.formatted &&
              <Text style={localStyles.subtitle}>PHP {account.balance.formatted}</Text>
            }
        </View>
        <View style={localStyles.viewAccounts}>
          <Text style={localStyles.bodyTitle}>TRANSACTIONS</Text>
          <SafeAreaView style={localStyles.listStyle}>
            {is_fetching && (
              <View
                style={{
                  flex: 1,
                  justifyContent: "center",
                  alignItems: "center"
                }}
              >
                <ActivityIndicator size="large" />
              </View>
            )}
            {!is_fetching && account.history && (
              <FlatList
                // data={DATA}
                data={account.history}
                renderItem={({ item }) => (
                  <Item
                    title={item.title}
                    amount={item.amount}
                    date={item.date}
                  />
                )}
                keyExtractor={item => item.id}
              />
            )}
          </SafeAreaView>
        </View>
      </Container>
    );
  }
}

let localStyles = StyleSheet.create({
  viewHeader: {
    flex: 1,
    backgroundColor: "#309fe7"
  },
  viewAccounts: {
    flex: 4,
    backgroundColor: "#f2f4f5"
  },
  title: {
    textAlign: "center",
    color: "#f5ac14",
    fontFamily: "Avenir_Heavy",
    paddingTop: 20,
    fontSize: 25
  },
  subtitle: {
    textAlign: "center",
    fontFamily: "Avenir_Heavy",
    fontSize: 20,
    color: "#fff",
    marginTop: 20,
    paddingBottom: 10
  },
  bodyTitle: {
    textAlign: "center",
    color: "#696969",
    fontFamily: "Avenir_Heavy",
    paddingTop: 20,
    paddingBottom: 10,
    fontSize: 20
  },
  listStyle: {
    flex: 1,
    marginTop: 10
  },
  listItem: {
    display: "flex",
    padding: 16,
    flexDirection: "column",
    backgroundColor: "#fff",
    marginVertical: 8,
    marginHorizontal: 16
  },
  itemText: {
    textAlign: "left",
    color: "#696969",
    textTransform: "capitalize",
    fontFamily: "Avenir_Heavy",
    fontSize: 18,
  },
  dateText: {
    textAlign: "left",
    color: "#696969",
    fontFamily: "Montserrat_Regular",
    fontSize: 12
  },
  amountText: {
    fontSize: 15,
    textAlign: "right",
    alignItems: "center",
    fontFamily: "Avenir_Medium",
  }
});

const mapStateToProps = (state, props) => {
  const { accountDetails } = state;
  console.log("accountDetails: ", accountDetails);
  return { accountDetails };
};

const mapDispatchToProps = dispatch => {
  return {
    getAccountDetails: (acctno = "001-01-00027-7", count = "10") => {
      dispatch(API.getAccountDetails(acctno, count));
    },
  };
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(AccountHistoryScreen);
