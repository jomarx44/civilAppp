import React, { useState, useEffect } from "react";
import { Text, View, ScrollView, Image, TouchableOpacity } from "react-native";
import { ContainedButton } from "../../components/Buttons";
import { Card } from "../../components/Card";
import { CameraModal } from "../../components/Camera";
import { styles, itemStyles } from "./styles";
import { AntDesign } from "@expo/vector-icons";
import * as ImagePicker from "expo-image-picker";
import MenuModal from "../../components/MenuModal";
import { Dropdown } from "./dropdown";
import { AddItemModal } from "./addItemModal"
import DropDownPicker from "react-native-dropdown-picker";

const IdentityRemoveButton = (props) => {
  const { onRemove } = props;
  return (
    <TouchableOpacity style={itemStyles.remove} onPress={onRemove}>
      <AntDesign name="closecircle" size={20} color="#0061f3" />
    </TouchableOpacity>
  );
};

export const IdentityPhoto = (props) => {
  const { image } = props;
  return (
    <View style={itemStyles.imageContainer}>
      <Image style={itemStyles.image} source={{ uri: image.uri ? image.uri : null }} />
    </View>
  );
};

export const IdentityDetail = (props) => {
  const { disabled, items, placeholder, defaultValue, onChangeItem } = props;
  return (
    <View style={itemStyles.detailsContainer}>
      <Text>ASDADS</Text>
      <Text style={itemStyles.description}>For Verification</Text>
    </View>
  );
};

export const IdentityItem = (props) => {
  const {
    item,
    handleEvent,
    onChangeItem,
    onRemove,
    onAdd,
    dropdownPlaceholder,
    dropdownDisabled,
    dropdownItems,
    dropdownDefaultValue,
  } = props;

  if (!item) {
    return (
      <Card style={itemStyles.container} onPress={onAdd}>
        <Text>Add Item</Text>
      </Card>
    );
  }

  return (
    <Card style={itemStyles.container}>
      <IdentityPhoto {...item} />
      <IdentityDetail
        {...item}
        onChangeItem={onChangeItem}
        placeholder={dropdownPlaceholder}
        disabled={dropdownDisabled}
        items={dropdownItems}
        defaultValue={dropdownDefaultValue}
      />
      <IdentityRemoveButton onRemove={onRemove} />
    </Card>
  );
};

export const UploadIdentity = (props) => {
  const [isMenuModalOpen, setMenuModalState] = useState(false);
  const [isCameraModalOpen, setCameraModalState] = useState(false);
  const [selectedId, setSelectedId] = useState("id1");
  const [identificationData, setIdentificationData] = useState({
    id1: props.route.params.data.id1ImageData,
    id2: props.route.params.data.id2ImageData,
  });
  const [govermentData, setGovernmentData] = useState({
    id1: {},
    id2: {}
  })

  const { navigation, route } = props;
  const {
    onSave,
    items,
    handleEvent,
    data: {
      id1_code,
      id2_code,
      government_id_1,
      government_id1_url,
      government_id_2,
      government_type_1,
      government_type_2,
      government_id2_url,
    },
    invalids,
    constraints
  } = route.params;

  const handleAdd = (id) => {
    setSelectedId(id);
    setMenuModalState(true);
  };

  const handleRemove = (id) => {
    setIdentificationData({
      ...identificationData,
      [id]: null,
    });
  };

  const handleTakePhoto = () => {
    setMenuModalState(false);
    setCameraModalState(true);
  };

  const handleSelectImageAsync = async () => {
    try {
      const options = {
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.5,
        base64: true,
      };

      const result = await ImagePicker.launchImageLibraryAsync(options);

      if (!result.cancelled) {
        setImage(selectedId, result);
        setMenuModalState(false);
      }
    } catch (error) {
      console.log("Error while selecting image: ", error);
    }
  };

  const handleChangeGovernmentData = (index, value) => {
    setGovernmentData({
      ...govermentData,
      [selectedId]: {
        ...govermentData[selectedId],
        [index]: value
      }
    });
  }

  const setImage = (id, image) => {
    setIdentificationData({
      ...identificationData,
      [id]: {
        ...identificationData[id],
        image,
      },
    });
  };

  const handleSaveCaptured = (image) => {
    setCameraModalState(false);
    setImage(selectedId, image);
  };

  const handleSubmit = () => {
    onSave(identificationData);
    navigation.goBack();
  };

  return (
    <View style={{ flexGrow: 1, marginTop: 40 }}>
      <ScrollView
        style={styles.container}
        contentContainerStyle={styles.contentContainer}
      >
        <IdentityItem
          item={identificationData.id1}
          onRemove={() => {
            handleRemove("id1");
          }}
          onAdd={() => {
            handleAdd("id1");
          }}
          dropdownItems={items}
          dropdownDefaultValue={government_type_1}
        />
        <IdentityItem
          item={identificationData.id2}
          onRemove={() => {
            handleRemove("id2");
          }}
          onAdd={() => {
            handleAdd("id2");
          }}
          dropdownItems={items}
          dropdownDefaultValue={government_type_2}
        />
      </ScrollView>
      <View style={styles.buttonContainer}>
        <ContainedButton label="SUBMIT" onPress={() => handleSubmit()} />
      </View>
      <MenuModal isVisible={isMenuModalOpen} setVisibility={setMenuModalState}>
        <View style={{backgroundColor: "#FFF", paddingHorizontal: 20, paddingVertical: 10, width: "100%", height: 500}}>
          <DropDownPicker
            disabled={false}
            items={items}
            defaultValue={null}
            placeholder="Select Government ID"
            onChangeItem={({ value, label }) => { 
              handleChangeGovernmentData("id_code", value) 
              handleChangeGovernmentData("government_type", label) 
            }}
            style={{ backgroundColor: "#fff", width: "100%" }}
            containerStyle={{ height: 40 }}
            dropDownStyle={{ backgroundColor: "#fcfcfc" }}
            itemStyle={{
              height: 20,
              justifyContent: "flex-start",
            }}
            labelStyle={{
              color: "#444",
              fontFamily: "Gilroy_Bold",
              fontSize: 14
            }}
            selectedLabelStyle={{
              color: "#003d6f",
              fontFamily: "Gilroy_Bold",
              fontSize: 14
            }}
          />
        </View>
          
        <ContainedButton
          label="Take a Photo"
          labelStyle={{ color: "#003d6f", fontFamily: "Gilroy_Bold" }}
          buttonStyle={{
            backgroundColor: "#FFF",
            width: "100%",
            borderBottomLeftRadius: 0,
            borderBottomRightRadius: 0,
            marginBottom: 1,
          }}
          onPress={() => handleTakePhoto()}
        />
        <ContainedButton
          label="Choose from Gallery"
          labelStyle={{ color: "#003d6f", fontFamily: "Gilroy_Bold" }}
          buttonStyle={{
            backgroundColor: "#FFF",
            width: "100%",
            borderTopLeftRadius: 0,
            borderTopRightRadius: 0,
          }}
          onPress={() => handleSelectImageAsync()}
        />
      </MenuModal>
      <CameraModal
        isCameraModalOpen={isCameraModalOpen}
        setCameraModalState={setCameraModalState}
        onSave={handleSaveCaptured}
      />
      
    </View>
  );
};

export default UploadIdentity;
